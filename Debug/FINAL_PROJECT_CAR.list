
FINAL_PROJECT_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005748  08005748  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005748  08005748  00006748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005750  08005750  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005754  08005754  00006754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005758  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  08005764  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005764  000071a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc26  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4c  00000000  00000000  00013c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000159a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096e  00000000  00000000  000165c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f1e  00000000  00000000  00016f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d459  00000000  00000000  0002ce54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb96  00000000  00000000  0003a2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8e43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c8  00000000  00000000  000c8e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cc150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080056e8 	.word	0x080056e8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080056e8 	.word	0x080056e8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <motors_forward>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void motors_forward(uint32_t speed)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
    // Set right motor speed using PWM
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8000470:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <motors_forward+0x34>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(MOTOR_RIGHT_BWD_PORT, MOTOR_RIGHT_BWD_PIN, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2180      	movs	r1, #128	@ 0x80
 800047c:	4808      	ldr	r0, [pc, #32]	@ (80004a0 <motors_forward+0x38>)
 800047e:	f002 f815 	bl	80024ac <HAL_GPIO_WritePin>

    // Set left motor speed using PWM
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000482:	4b06      	ldr	r3, [pc, #24]	@ (800049c <motors_forward+0x34>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(MOTOR_LEFT_BWD_PORT, MOTOR_LEFT_BWD_PIN, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2110      	movs	r1, #16
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <motors_forward+0x3c>)
 8000490:	f002 f80c 	bl	80024ac <HAL_GPIO_WritePin>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000bc 	.word	0x200000bc
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40020400 	.word	0x40020400

080004a8 <motors_backward>:

void motors_backward(uint32_t speed)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
    // Right motor backward
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80004b0:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <motors_backward+0x34>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2200      	movs	r2, #0
 80004b6:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(MOTOR_RIGHT_BWD_PORT, MOTOR_RIGHT_BWD_PIN, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2180      	movs	r1, #128	@ 0x80
 80004bc:	4808      	ldr	r0, [pc, #32]	@ (80004e0 <motors_backward+0x38>)
 80004be:	f001 fff5 	bl	80024ac <HAL_GPIO_WritePin>

    // Left motor backward
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <motors_backward+0x34>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(MOTOR_LEFT_BWD_PORT, MOTOR_LEFT_BWD_PIN, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2110      	movs	r1, #16
 80004ce:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <motors_backward+0x3c>)
 80004d0:	f001 ffec 	bl	80024ac <HAL_GPIO_WritePin>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000bc 	.word	0x200000bc
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40020400 	.word	0x40020400

080004e8 <motors_turn_right>:

void motors_turn_right(uint32_t speed)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    // Right motor backward
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <motors_turn_right+0x34>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(MOTOR_RIGHT_BWD_PORT, MOTOR_RIGHT_BWD_PIN, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2180      	movs	r1, #128	@ 0x80
 80004fc:	4808      	ldr	r0, [pc, #32]	@ (8000520 <motors_turn_right+0x38>)
 80004fe:	f001 ffd5 	bl	80024ac <HAL_GPIO_WritePin>

    // Left motor forward
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <motors_turn_right+0x34>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(MOTOR_LEFT_BWD_PORT, MOTOR_LEFT_BWD_PIN, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2110      	movs	r1, #16
 800050e:	4805      	ldr	r0, [pc, #20]	@ (8000524 <motors_turn_right+0x3c>)
 8000510:	f001 ffcc 	bl	80024ac <HAL_GPIO_WritePin>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000bc 	.word	0x200000bc
 8000520:	40020000 	.word	0x40020000
 8000524:	40020400 	.word	0x40020400

08000528 <motors_turn_left>:

void motors_turn_left(uint32_t speed)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    // Right motor forward
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8000530:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <motors_turn_left+0x34>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(MOTOR_RIGHT_BWD_PORT, MOTOR_RIGHT_BWD_PIN, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2180      	movs	r1, #128	@ 0x80
 800053c:	4808      	ldr	r0, [pc, #32]	@ (8000560 <motors_turn_left+0x38>)
 800053e:	f001 ffb5 	bl	80024ac <HAL_GPIO_WritePin>

    // Left motor backward
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000542:	4b06      	ldr	r3, [pc, #24]	@ (800055c <motors_turn_left+0x34>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(MOTOR_LEFT_BWD_PORT, MOTOR_LEFT_BWD_PIN, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4805      	ldr	r0, [pc, #20]	@ (8000564 <motors_turn_left+0x3c>)
 8000550:	f001 ffac 	bl	80024ac <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200000bc 	.word	0x200000bc
 8000560:	40020000 	.word	0x40020000
 8000564:	40020400 	.word	0x40020400

08000568 <motors_stop>:

void motors_stop(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    // Stop right motor
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MOTOR_STOP);
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <motors_stop+0x2c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(MOTOR_RIGHT_BWD_PORT, MOTOR_RIGHT_BWD_PIN, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	4807      	ldr	r0, [pc, #28]	@ (8000598 <motors_stop+0x30>)
 800057a:	f001 ff97 	bl	80024ac <HAL_GPIO_WritePin>

    // Stop left motor
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOTOR_STOP);
 800057e:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <motors_stop+0x2c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(MOTOR_LEFT_BWD_PORT, MOTOR_LEFT_BWD_PIN, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2110      	movs	r1, #16
 800058a:	4804      	ldr	r0, [pc, #16]	@ (800059c <motors_stop+0x34>)
 800058c:	f001 ff8e 	bl	80024ac <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000bc 	.word	0x200000bc
 8000598:	40020000 	.word	0x40020000
 800059c:	40020400 	.word	0x40020400

080005a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)  // 300ms timer for trigger
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000618 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d12e      	bne.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x70>
    {
        // Start ADC conversion and read value
        HAL_ADC_Start(&hadc);
 80005b2:	481a      	ldr	r0, [pc, #104]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005b4:	f001 f92c 	bl	8001810 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc, 100) == HAL_OK)
 80005b8:	2164      	movs	r1, #100	@ 0x64
 80005ba:	4818      	ldr	r0, [pc, #96]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005bc:	f001 f9b4 	bl	8001928 <HAL_ADC_PollForConversion>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d124      	bne.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x70>
        {
            AdcValue = HAL_ADC_GetValue(&hadc);
 80005c6:	4815      	ldr	r0, [pc, #84]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005c8:	f001 fa3e 	bl	8001a48 <HAL_ADC_GetValue>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005d0:	6013      	str	r3, [r2, #0]
            HAL_ADC_Stop(&hadc);
 80005d2:	4812      	ldr	r0, [pc, #72]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005d4:	f001 f97c 	bl	80018d0 <HAL_ADC_Stop>

            if(AdcValue >= ADC_THRESHOLD)
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d906      	bls.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x52>
            {
                if(!manualMode)  // Only trigger ultrasonic sensor in automatic mode
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d111      	bne.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x70>
                {
                    HCSR04_Start();
 80005ec:	f000 f9a6 	bl	800093c <HCSR04_Start>
                HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_2);
                motors_stop();  // Stop motors when voltage is low
            }
        }
    }
}
 80005f0:	e00e      	b.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x70>
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);  // Buzzer off when voltage < 2V
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005fa:	63da      	str	r2, [r3, #60]	@ 0x3c
                HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);  // Stop sensor when voltage is low
 80005fc:	2100      	movs	r1, #0
 80005fe:	480b      	ldr	r0, [pc, #44]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000600:	f003 f99e 	bl	8003940 <HAL_TIM_IC_Stop_IT>
                HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000604:	2104      	movs	r1, #4
 8000606:	4809      	ldr	r0, [pc, #36]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000608:	f002 ff1a 	bl	8003440 <HAL_TIM_OC_Stop_IT>
                motors_stop();  // Stop motors when voltage is low
 800060c:	f7ff ffac 	bl	8000568 <motors_stop>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40000800 	.word	0x40000800
 800061c:	20000028 	.word	0x20000028
 8000620:	20000198 	.word	0x20000198
 8000624:	2000019c 	.word	0x2000019c
 8000628:	200000bc 	.word	0x200000bc
 800062c:	2000007c 	.word	0x2000007c

08000630 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a5e      	ldr	r2, [pc, #376]	@ (80007b8 <HAL_UART_RxCpltCallback+0x188>)
 800063e:	4293      	cmp	r3, r2
 8000640:	f040 80b1 	bne.w	80007a6 <HAL_UART_RxCpltCallback+0x176>
    {
        // Send acknowledgment back to confirm command received
    	uint8_t ack[] = "OK\r\n";
 8000644:	4a5d      	ldr	r2, [pc, #372]	@ (80007bc <HAL_UART_RxCpltCallback+0x18c>)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064e:	6018      	str	r0, [r3, #0]
 8000650:	3304      	adds	r3, #4
 8000652:	7019      	strb	r1, [r3, #0]
        HAL_UART_Transmit(&huart1, ack, sizeof(ack)-1, 100);
 8000654:	f107 0108 	add.w	r1, r7, #8
 8000658:	2364      	movs	r3, #100	@ 0x64
 800065a:	2204      	movs	r2, #4
 800065c:	4858      	ldr	r0, [pc, #352]	@ (80007c0 <HAL_UART_RxCpltCallback+0x190>)
 800065e:	f004 f999 	bl	8004994 <HAL_UART_Transmit>

        switch(rxData)
 8000662:	4b58      	ldr	r3, [pc, #352]	@ (80007c4 <HAL_UART_RxCpltCallback+0x194>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3b41      	subs	r3, #65	@ 0x41
 8000668:	2b12      	cmp	r3, #18
 800066a:	f200 809c 	bhi.w	80007a6 <HAL_UART_RxCpltCallback+0x176>
 800066e:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <HAL_UART_RxCpltCallback+0x44>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	080006e5 	.word	0x080006e5
 8000678:	08000727 	.word	0x08000727
 800067c:	080007a7 	.word	0x080007a7
 8000680:	080007a7 	.word	0x080007a7
 8000684:	080007a7 	.word	0x080007a7
 8000688:	08000709 	.word	0x08000709
 800068c:	080007a7 	.word	0x080007a7
 8000690:	080007a7 	.word	0x080007a7
 8000694:	080007a7 	.word	0x080007a7
 8000698:	080007a7 	.word	0x080007a7
 800069c:	080007a7 	.word	0x080007a7
 80006a0:	08000743 	.word	0x08000743
 80006a4:	080006c1 	.word	0x080006c1
 80006a8:	080007a7 	.word	0x080007a7
 80006ac:	080007a7 	.word	0x080007a7
 80006b0:	080007a7 	.word	0x080007a7
 80006b4:	080007a7 	.word	0x080007a7
 80006b8:	08000761 	.word	0x08000761
 80006bc:	0800077f 	.word	0x0800077f
        {
            case 'M': // Manual mode
                if(!manualMode) {  // Only if not already in manual mode
 80006c0:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d161      	bne.n	800078c <HAL_UART_RxCpltCallback+0x15c>
                    manualMode = 1;
 80006c8:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
                    motors_stop();
 80006ce:	f7ff ff4b 	bl	8000568 <motors_stop>
                    HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80006d2:	2100      	movs	r1, #0
 80006d4:	483d      	ldr	r0, [pc, #244]	@ (80007cc <HAL_UART_RxCpltCallback+0x19c>)
 80006d6:	f003 f933 	bl	8003940 <HAL_TIM_IC_Stop_IT>
                    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_2);
 80006da:	2104      	movs	r1, #4
 80006dc:	483b      	ldr	r0, [pc, #236]	@ (80007cc <HAL_UART_RxCpltCallback+0x19c>)
 80006de:	f002 feaf 	bl	8003440 <HAL_TIM_OC_Stop_IT>
                }
                break;
 80006e2:	e053      	b.n	800078c <HAL_UART_RxCpltCallback+0x15c>

            case 'A': // Automatic mode
                if(manualMode) {  // Only if not already in automatic mode
 80006e4:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d051      	beq.n	8000790 <HAL_UART_RxCpltCallback+0x160>
                    manualMode = 0;
 80006ec:	4b36      	ldr	r3, [pc, #216]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
                    motors_stop();
 80006f2:	f7ff ff39 	bl	8000568 <motors_stop>
                    if(AdcValue >= ADC_THRESHOLD)
 80006f6:	4b36      	ldr	r3, [pc, #216]	@ (80007d0 <HAL_UART_RxCpltCallback+0x1a0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 80006fe:	4293      	cmp	r3, r2
 8000700:	d946      	bls.n	8000790 <HAL_UART_RxCpltCallback+0x160>
                    {
                        HCSR04_Start();
 8000702:	f000 f91b 	bl	800093c <HCSR04_Start>
                    }
                }
                break;
 8000706:	e043      	b.n	8000790 <HAL_UART_RxCpltCallback+0x160>

            case 'F': // Forward
                if(manualMode && AdcValue >= ADC_THRESHOLD)
 8000708:	4b2f      	ldr	r3, [pc, #188]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d041      	beq.n	8000794 <HAL_UART_RxCpltCallback+0x164>
 8000710:	4b2f      	ldr	r3, [pc, #188]	@ (80007d0 <HAL_UART_RxCpltCallback+0x1a0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 8000718:	4293      	cmp	r3, r2
 800071a:	d93b      	bls.n	8000794 <HAL_UART_RxCpltCallback+0x164>
                {
                    motors_forward(MOTOR_FULL_SPEED);
 800071c:	f240 30e7 	movw	r0, #999	@ 0x3e7
 8000720:	f7ff fea2 	bl	8000468 <motors_forward>
                }
                break;
 8000724:	e036      	b.n	8000794 <HAL_UART_RxCpltCallback+0x164>

            case 'B': // Backward
                if(manualMode && AdcValue >= ADC_THRESHOLD)
 8000726:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d034      	beq.n	8000798 <HAL_UART_RxCpltCallback+0x168>
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <HAL_UART_RxCpltCallback+0x1a0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 8000736:	4293      	cmp	r3, r2
 8000738:	d92e      	bls.n	8000798 <HAL_UART_RxCpltCallback+0x168>
                {
                    motors_backward(MOTOR_SLOW_SPEED);
 800073a:	20c8      	movs	r0, #200	@ 0xc8
 800073c:	f7ff feb4 	bl	80004a8 <motors_backward>
                }
                break;
 8000740:	e02a      	b.n	8000798 <HAL_UART_RxCpltCallback+0x168>

            case 'L': // Left
                if(manualMode && AdcValue >= ADC_THRESHOLD)
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d028      	beq.n	800079c <HAL_UART_RxCpltCallback+0x16c>
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <HAL_UART_RxCpltCallback+0x1a0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 8000752:	4293      	cmp	r3, r2
 8000754:	d922      	bls.n	800079c <HAL_UART_RxCpltCallback+0x16c>
                {
                    motors_turn_left(MOTOR_FULL_SPEED);
 8000756:	f240 30e7 	movw	r0, #999	@ 0x3e7
 800075a:	f7ff fee5 	bl	8000528 <motors_turn_left>
                }
                break;
 800075e:	e01d      	b.n	800079c <HAL_UART_RxCpltCallback+0x16c>

            case 'R': // Right
                if(manualMode && AdcValue >= ADC_THRESHOLD)
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d01b      	beq.n	80007a0 <HAL_UART_RxCpltCallback+0x170>
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <HAL_UART_RxCpltCallback+0x1a0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 8000770:	4293      	cmp	r3, r2
 8000772:	d915      	bls.n	80007a0 <HAL_UART_RxCpltCallback+0x170>
                {
                    motors_turn_right(MOTOR_FULL_SPEED);
 8000774:	f240 30e7 	movw	r0, #999	@ 0x3e7
 8000778:	f7ff feb6 	bl	80004e8 <motors_turn_right>
                }
                break;
 800077c:	e010      	b.n	80007a0 <HAL_UART_RxCpltCallback+0x170>

            case 'S': // Stop
                if(manualMode)
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_UART_RxCpltCallback+0x198>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00e      	beq.n	80007a4 <HAL_UART_RxCpltCallback+0x174>
                {
                    motors_stop();
 8000786:	f7ff feef 	bl	8000568 <motors_stop>
                }
                break;
 800078a:	e00b      	b.n	80007a4 <HAL_UART_RxCpltCallback+0x174>
                break;
 800078c:	bf00      	nop
 800078e:	e00a      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x176>
                break;
 8000790:	bf00      	nop
 8000792:	e008      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x176>
                break;
 8000794:	bf00      	nop
 8000796:	e006      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x176>
                break;
 8000798:	bf00      	nop
 800079a:	e004      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x176>
                break;
 800079c:	bf00      	nop
 800079e:	e002      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x176>
                break;
 80007a0:	bf00      	nop
 80007a2:	e000      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x176>
                break;
 80007a4:	bf00      	nop
        }
    }

    // Immediately restart reception for next command
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	4906      	ldr	r1, [pc, #24]	@ (80007c4 <HAL_UART_RxCpltCallback+0x194>)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <HAL_UART_RxCpltCallback+0x190>)
 80007ac:	f004 f975 	bl	8004a9a <HAL_UART_Receive_IT>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013800 	.word	0x40013800
 80007bc:	08005700 	.word	0x08005700
 80007c0:	2000013c 	.word	0x2000013c
 80007c4:	2000019d 	.word	0x2000019d
 80007c8:	2000019c 	.word	0x2000019c
 80007cc:	2000007c 	.word	0x2000007c
 80007d0:	20000198 	.word	0x20000198

080007d4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM2) return;  // Only process TIM2 events
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007e4:	f040 8091 	bne.w	800090a <HAL_TIM_IC_CaptureCallback+0x136>
    if (manualMode) return;  // Don't process if in manual mode
 80007e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000918 <HAL_TIM_IC_CaptureCallback+0x144>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	f040 808e 	bne.w	800090e <HAL_TIM_IC_CaptureCallback+0x13a>

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7e1b      	ldrb	r3, [r3, #24]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	f040 808a 	bne.w	8000910 <HAL_TIM_IC_CaptureCallback+0x13c>
    {
        if (Is_First_Captured == 0)
 80007fc:	4b47      	ldr	r3, [pc, #284]	@ (800091c <HAL_TIM_IC_CaptureCallback+0x148>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11a      	bne.n	800083a <HAL_TIM_IC_CaptureCallback+0x66>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f003 fc82 	bl	8004110 <HAL_TIM_ReadCapturedValue>
 800080c:	4603      	mov	r3, r0
 800080e:	4a44      	ldr	r2, [pc, #272]	@ (8000920 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000810:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;
 8000812:	4b42      	ldr	r3, [pc, #264]	@ (800091c <HAL_TIM_IC_CaptureCallback+0x148>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6a1a      	ldr	r2, [r3, #32]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 020a 	bic.w	r2, r2, #10
 8000826:	621a      	str	r2, [r3, #32]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6a1a      	ldr	r2, [r3, #32]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 0202 	orr.w	r2, r2, #2
 8000836:	621a      	str	r2, [r3, #32]
 8000838:	e06a      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0x13c>
        }
        else
        {
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800083a:	2100      	movs	r1, #0
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f003 fc67 	bl	8004110 <HAL_TIM_ReadCapturedValue>
 8000842:	4603      	mov	r3, r0
 8000844:	4a37      	ldr	r2, [pc, #220]	@ (8000924 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000846:	6013      	str	r3, [r2, #0]

            if (IC_Val2 > IC_Val1)
 8000848:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <HAL_TIM_IC_CaptureCallback+0x150>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d907      	bls.n	8000864 <HAL_TIM_IC_CaptureCallback+0x90>
                Difference = IC_Val2 - IC_Val1;
 8000854:	4b33      	ldr	r3, [pc, #204]	@ (8000924 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a32      	ldr	r2, [pc, #200]	@ (8000928 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e00e      	b.n	8000882 <HAL_TIM_IC_CaptureCallback+0xae>
            else if (IC_Val2 < IC_Val1)
 8000864:	4b2f      	ldr	r3, [pc, #188]	@ (8000924 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b2d      	ldr	r3, [pc, #180]	@ (8000920 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d208      	bcs.n	8000882 <HAL_TIM_IC_CaptureCallback+0xae>
                Difference = ((65535 - IC_Val1) + IC_Val2) + 1;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b2a      	ldr	r3, [pc, #168]	@ (8000920 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800087e:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000880:	6013      	str	r3, [r2, #0]

            Distance = Difference / 58;
 8000882:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a29      	ldr	r2, [pc, #164]	@ (800092c <HAL_TIM_IC_CaptureCallback+0x158>)
 8000888:	fba2 2303 	umull	r2, r3, r2, r3
 800088c:	095b      	lsrs	r3, r3, #5
 800088e:	4a28      	ldr	r2, [pc, #160]	@ (8000930 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000890:	6013      	str	r3, [r2, #0]

            // Update Buzzer and Motors based on distance only if ADC value is above threshold
            if(AdcValue >= ADC_THRESHOLD)
 8000892:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 800089a:	4293      	cmp	r3, r2
 800089c:	d921      	bls.n	80008e2 <HAL_TIM_IC_CaptureCallback+0x10e>
            {
                if(Distance >= 30) {
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b1d      	cmp	r3, #29
 80008a4:	d909      	bls.n	80008ba <HAL_TIM_IC_CaptureCallback+0xe6>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);  // Buzzer off
 80008a6:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <HAL_TIM_IC_CaptureCallback+0x164>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ae:	63da      	str	r2, [r3, #60]	@ 0x3c
                    motors_forward(MOTOR_FULL_SPEED);  // Full speed forward
 80008b0:	f240 30e7 	movw	r0, #999	@ 0x3e7
 80008b4:	f7ff fdd8 	bl	8000468 <motors_forward>
 80008b8:	e015      	b.n	80008e6 <HAL_TIM_IC_CaptureCallback+0x112>
                }
                else if(Distance >= 10) {
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b09      	cmp	r3, #9
 80008c0:	d908      	bls.n	80008d4 <HAL_TIM_IC_CaptureCallback+0x100>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);   // Buzzer medium
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <HAL_TIM_IC_CaptureCallback+0x164>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80008ca:	63da      	str	r2, [r3, #60]	@ 0x3c
                    motors_forward(MOTOR_SLOW_SPEED);  // Slow speed forward
 80008cc:	20c8      	movs	r0, #200	@ 0xc8
 80008ce:	f7ff fdcb 	bl	8000468 <motors_forward>
 80008d2:	e008      	b.n	80008e6 <HAL_TIM_IC_CaptureCallback+0x112>
                }
                else {
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);     // Buzzer full
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <HAL_TIM_IC_CaptureCallback+0x164>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	63da      	str	r2, [r3, #60]	@ 0x3c
                    motors_stop();     // Stop motors when too close
 80008dc:	f7ff fe44 	bl	8000568 <motors_stop>
 80008e0:	e001      	b.n	80008e6 <HAL_TIM_IC_CaptureCallback+0x112>
                }
            }
            else {
                motors_stop();  // Stop motors when ADC below threshold
 80008e2:	f7ff fe41 	bl	8000568 <motors_stop>
            }

            Is_First_Captured = 0;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <HAL_TIM_IC_CaptureCallback+0x148>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a1a      	ldr	r2, [r3, #32]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f022 020a 	bic.w	r2, r2, #10
 80008fa:	621a      	str	r2, [r3, #32]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6a12      	ldr	r2, [r2, #32]
 8000906:	621a      	str	r2, [r3, #32]
 8000908:	e002      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0x13c>
    if (htim->Instance != TIM2) return;  // Only process TIM2 events
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0x13c>
    if (manualMode) return;  // Don't process if in manual mode
 800090e:	bf00      	nop
        }
    }
}
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000019c 	.word	0x2000019c
 800091c:	20000190 	.word	0x20000190
 8000920:	20000184 	.word	0x20000184
 8000924:	20000188 	.word	0x20000188
 8000928:	2000018c 	.word	0x2000018c
 800092c:	8d3dcb09 	.word	0x8d3dcb09
 8000930:	20000194 	.word	0x20000194
 8000934:	20000198 	.word	0x20000198
 8000938:	200000bc 	.word	0x200000bc

0800093c <HCSR04_Start>:

void HCSR04_Start(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);    // Start input capture
 8000940:	2100      	movs	r1, #0
 8000942:	4804      	ldr	r0, [pc, #16]	@ (8000954 <HCSR04_Start+0x18>)
 8000944:	f002 ff2c 	bl	80037a0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);    // Start output compare
 8000948:	2104      	movs	r1, #4
 800094a:	4802      	ldr	r0, [pc, #8]	@ (8000954 <HCSR04_Start+0x18>)
 800094c:	f002 fc96 	bl	800327c <HAL_TIM_OC_Start_IT>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000007c 	.word	0x2000007c

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fda2 	bl	80014a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f863 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 fac7 	bl	8000ef8 <MX_GPIO_Init>
  MX_ADC_Init();
 800096a:	f000 f8ad 	bl	8000ac8 <MX_ADC_Init>
  MX_TIM2_Init();
 800096e:	f000 f905 	bl	8000b7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000972:	f000 f995 	bl	8000ca0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000976:	f000 fa21 	bl	8000dbc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800097a:	f000 fa93 	bl	8000ea4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start PWM for right motor
 800097e:	2100      	movs	r1, #0
 8000980:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <main+0xb8>)
 8000982:	f002 fe2f 	bl	80035e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Start PWM for left motor
 8000986:	2104      	movs	r1, #4
 8000988:	4821      	ldr	r0, [pc, #132]	@ (8000a10 <main+0xb8>)
 800098a:	f002 fe2b 	bl	80035e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  // Start PWM for buzzer
 800098e:	2108      	movs	r1, #8
 8000990:	481f      	ldr	r0, [pc, #124]	@ (8000a10 <main+0xb8>)
 8000992:	f002 fe27 	bl	80035e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);             // Enable update interrupt for trigger timing
 8000996:	481f      	ldr	r0, [pc, #124]	@ (8000a14 <main+0xbc>)
 8000998:	f002 fbd6 	bl	8003148 <HAL_TIM_Base_Start_IT>

  // Send initial connection message
  uint8_t connectMsg[] = "Connection Established\r\n";
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <main+0xc0>)
 800099e:	1d3c      	adds	r4, r7, #4
 80009a0:	461d      	mov	r5, r3
 80009a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009aa:	c403      	stmia	r4!, {r0, r1}
 80009ac:	7022      	strb	r2, [r4, #0]
  HAL_UART_Transmit(&huart1, connectMsg, sizeof(connectMsg)-1, 1000);
 80009ae:	1d39      	adds	r1, r7, #4
 80009b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b4:	2218      	movs	r2, #24
 80009b6:	4819      	ldr	r0, [pc, #100]	@ (8000a1c <main+0xc4>)
 80009b8:	f003 ffec 	bl	8004994 <HAL_UART_Transmit>

  // Start receiving Bluetooth commands
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxData, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	4918      	ldr	r1, [pc, #96]	@ (8000a20 <main+0xc8>)
 80009c0:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <main+0xc4>)
 80009c2:	f004 f86a 	bl	8004a9a <HAL_UART_Receive_IT>

  // Initial ADC read and motor setup
  HAL_ADC_Start(&hadc);
 80009c6:	4817      	ldr	r0, [pc, #92]	@ (8000a24 <main+0xcc>)
 80009c8:	f000 ff22 	bl	8001810 <HAL_ADC_Start>
  if(HAL_ADC_PollForConversion(&hadc, 100) == HAL_OK)
 80009cc:	2164      	movs	r1, #100	@ 0x64
 80009ce:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <main+0xcc>)
 80009d0:	f000 ffaa 	bl	8001928 <HAL_ADC_PollForConversion>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d114      	bne.n	8000a04 <main+0xac>
  {
      AdcValue = HAL_ADC_GetValue(&hadc);
 80009da:	4812      	ldr	r0, [pc, #72]	@ (8000a24 <main+0xcc>)
 80009dc:	f001 f834 	bl	8001a48 <HAL_ADC_GetValue>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <main+0xd0>)
 80009e4:	6013      	str	r3, [r2, #0]
      if(AdcValue >= ADC_THRESHOLD)
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <main+0xd0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f640 12b1 	movw	r2, #2481	@ 0x9b1
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d906      	bls.n	8000a00 <main+0xa8>
      {
          motors_forward(MOTOR_FULL_SPEED);  // Start at full speed if voltage is above threshold
 80009f2:	f240 30e7 	movw	r0, #999	@ 0x3e7
 80009f6:	f7ff fd37 	bl	8000468 <motors_forward>
          HCSR04_Start();
 80009fa:	f7ff ff9f 	bl	800093c <HCSR04_Start>
 80009fe:	e001      	b.n	8000a04 <main+0xac>
      }
      else
      {
          motors_stop();     // Ensure motors are stopped if voltage is low
 8000a00:	f7ff fdb2 	bl	8000568 <motors_stop>
      }
  }
  HAL_ADC_Stop(&hadc);
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <main+0xcc>)
 8000a06:	f000 ff63 	bl	80018d0 <HAL_ADC_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0a:	bf00      	nop
 8000a0c:	e7fd      	b.n	8000a0a <main+0xb2>
 8000a0e:	bf00      	nop
 8000a10:	200000bc 	.word	0x200000bc
 8000a14:	200000fc 	.word	0x200000fc
 8000a18:	08005708 	.word	0x08005708
 8000a1c:	2000013c 	.word	0x2000013c
 8000a20:	2000019d 	.word	0x2000019d
 8000a24:	20000028 	.word	0x20000028
 8000a28:	20000198 	.word	0x20000198

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b092      	sub	sp, #72	@ 0x48
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2234      	movs	r2, #52	@ 0x34
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f004 fe28 	bl	8005690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <SystemClock_Config+0x98>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000a56:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac4 <SystemClock_Config+0x98>)
 8000a58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a5c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a66:	2310      	movs	r3, #16
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a72:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000a76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000a78:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000a7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fd2a 	bl	80024dc <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a8e:	f000 faaf 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f846 	bl	8002b3c <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ab6:	f000 fa9b 	bl	8000ff0 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3748      	adds	r7, #72	@ 0x48
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000ada:	4a27      	ldr	r2, [pc, #156]	@ (8000b78 <MX_ADC_Init+0xb0>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000ae0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ae4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aec:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b12:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b3e:	f000 fd21 	bl	8001584 <HAL_ADC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000b48:	f000 fa52 	bl	8000ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_ADC_Init+0xac>)
 8000b5e:	f000 ff7f 	bl	8001a60 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000b68:	f000 fa42 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000028 	.word	0x20000028
 8000b78:	40012400 	.word	0x40012400

08000b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	@ 0x38
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	f107 0320 	add.w	r3, r7, #32
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb4:	4b39      	ldr	r3, [pc, #228]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000bbc:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bbe:	221f      	movs	r2, #31
 8000bc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bc8:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bdc:	482f      	ldr	r0, [pc, #188]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bde:	f002 fa73 	bl	80030c8 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000be8:	f000 fa02 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4828      	ldr	r0, [pc, #160]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000bfa:	f003 f9c1 	bl	8003f80 <HAL_TIM_ConfigClockSource>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c04:	f000 f9f4 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c08:	4824      	ldr	r0, [pc, #144]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000c0a:	f002 fd81 	bl	8003710 <HAL_TIM_IC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c14:	f000 f9ec 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000c18:	4820      	ldr	r0, [pc, #128]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000c1a:	f002 fae7 	bl	80031ec <HAL_TIM_OC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000c24:	f000 f9e4 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4619      	mov	r1, r3
 8000c36:	4819      	ldr	r0, [pc, #100]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000c38:	f003 fdfe 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000c42:	f000 f9d5 	bl	8000ff0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  sConfigIC.ICFilter = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000c60:	f003 f830 	bl	8003cc4 <HAL_TIM_IC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000c6a:	f000 f9c1 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c6e:	2330      	movs	r3, #48	@ 0x30
 8000c70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000c72:	230a      	movs	r3, #10
 8000c74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2204      	movs	r2, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_TIM2_Init+0x120>)
 8000c86:	f002 ffc1 	bl	8003c0c <HAL_TIM_OC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000c90:	f000 f9ae 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3738      	adds	r7, #56	@ 0x38
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000007c 	.word	0x2000007c

08000ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cca:	4b3a      	ldr	r3, [pc, #232]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8000db8 <MX_TIM3_Init+0x118>)
 8000cce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8000cd0:	4b38      	ldr	r3, [pc, #224]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000cd2:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000cd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b36      	ldr	r3, [pc, #216]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cde:	4b35      	ldr	r3, [pc, #212]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000ce0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b33      	ldr	r3, [pc, #204]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cec:	4b31      	ldr	r3, [pc, #196]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000cee:	2280      	movs	r2, #128	@ 0x80
 8000cf0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cf2:	4830      	ldr	r0, [pc, #192]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000cf4:	f002 f9e8 	bl	80030c8 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000cfe:	f000 f977 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d06:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4829      	ldr	r0, [pc, #164]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000d10:	f003 f936 	bl	8003f80 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d1a:	f000 f969 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d1e:	4825      	ldr	r0, [pc, #148]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000d20:	f002 fc18 	bl	8003554 <HAL_TIM_PWM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d2a:	f000 f961 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481d      	ldr	r0, [pc, #116]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000d3e:	f003 fd7b 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000d48:	f000 f952 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4c:	2360      	movs	r3, #96	@ 0x60
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000d64:	f003 f84a 	bl	8003dfc <HAL_TIM_PWM_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000d6e:	f000 f93f 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	2204      	movs	r2, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000d7a:	f003 f83f 	bl	8003dfc <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8000d84:	f000 f934 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000d88:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2208      	movs	r2, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	4807      	ldr	r0, [pc, #28]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000d96:	f003 f831 	bl	8003dfc <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000da0:	f000 f926 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <MX_TIM3_Init+0x114>)
 8000da6:	f000 fa1b 	bl	80011e0 <HAL_TIM_MspPostInit>

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	@ 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000bc 	.word	0x200000bc
 8000db8:	40000400 	.word	0x40000400

08000dbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000de8:	4a2d      	ldr	r2, [pc, #180]	@ (8000ea0 <MX_TIM4_Init+0xe4>)
 8000dea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 8000dec:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000dee:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000df2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b29      	ldr	r3, [pc, #164]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 299;
 8000dfa:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000dfc:	f240 122b 	movw	r2, #299	@ 0x12b
 8000e00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e0a:	2280      	movs	r2, #128	@ 0x80
 8000e0c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e0e:	4823      	ldr	r0, [pc, #140]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e10:	f002 f95a 	bl	80030c8 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000e1a:	f000 f8e9 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e22:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481c      	ldr	r0, [pc, #112]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e2c:	f003 f8a8 	bl	8003f80 <HAL_TIM_ConfigClockSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e36:	f000 f8db 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e3a:	4818      	ldr	r0, [pc, #96]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e3c:	f002 fb8a 	bl	8003554 <HAL_TIM_PWM_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000e46:	f000 f8d3 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e5a:	f003 fced 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000e64:	f000 f8c4 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	2360      	movs	r3, #96	@ 0x60
 8000e6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e80:	f002 ffbc 	bl	8003dfc <HAL_TIM_PWM_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000e8a:	f000 f8b1 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e8e:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <MX_TIM4_Init+0xe0>)
 8000e90:	f000 f9a6 	bl	80011e0 <HAL_TIM_MspPostInit>

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	@ 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200000fc 	.word	0x200000fc
 8000ea0:	40000800 	.word	0x40000800

08000ea4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000edc:	f003 fd0a 	bl	80048f4 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ee6:	f000 f883 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000013c 	.word	0x2000013c
 8000ef4:	40013800 	.word	0x40013800

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a33      	ldr	r2, [pc, #204]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b31      	ldr	r3, [pc, #196]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2180      	movs	r1, #128	@ 0x80
 8000f72:	481c      	ldr	r0, [pc, #112]	@ (8000fe4 <MX_GPIO_Init+0xec>)
 8000f74:	f001 fa9a 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	481a      	ldr	r0, [pc, #104]	@ (8000fe8 <MX_GPIO_Init+0xf0>)
 8000f7e:	f001 fa95 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4814      	ldr	r0, [pc, #80]	@ (8000fec <MX_GPIO_Init+0xf4>)
 8000f9a:	f001 f8f7 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <MX_GPIO_Init+0xec>)
 8000fb6:	f001 f8e9 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_GPIO_Init+0xf0>)
 8000fd2:	f001 f8db 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40020800 	.word	0x40020800

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
        __disable_irq();
        while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_MspInit+0x5c>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001006:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <HAL_MspInit+0x5c>)
 8001008:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800100c:	6253      	str	r3, [r2, #36]	@ 0x24
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_MspInit+0x5c>)
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_MspInit+0x5c>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <HAL_MspInit+0x5c>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_MspInit+0x5c>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_MspInit+0x5c>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_MspInit+0x5c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103c:	6253      	str	r3, [r2, #36]	@ 0x24
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_MspInit+0x5c>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800104a:	2007      	movs	r0, #7
 800104c:	f000 ffde 	bl	800200c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	@ 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a15      	ldr	r2, [pc, #84]	@ (80010d0 <HAL_ADC_MspInit+0x74>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d123      	bne.n	80010c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HAL_ADC_MspInit+0x78>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <HAL_ADC_MspInit+0x78>)
 8001084:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_ADC_MspInit+0x78>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_ADC_MspInit+0x78>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <HAL_ADC_MspInit+0x78>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_ADC_MspInit+0x78>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ae:	2320      	movs	r3, #32
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <HAL_ADC_MspInit+0x7c>)
 80010c2:	f001 f863 	bl	800218c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	@ 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40012400 	.word	0x40012400
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010fc:	d130      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fe:	4b34      	ldr	r3, [pc, #208]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	4a33      	ldr	r2, [pc, #204]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6253      	str	r3, [r2, #36]	@ 0x24
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a2d      	ldr	r2, [pc, #180]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP1     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800112e:	2303      	movs	r3, #3
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800113e:	2301      	movs	r3, #1
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4822      	ldr	r0, [pc, #136]	@ (80011d4 <HAL_TIM_Base_MspInit+0xf8>)
 800114a:	f001 f81f 	bl	800218c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	201c      	movs	r0, #28
 8001154:	f000 ff65 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001158:	201c      	movs	r0, #28
 800115a:	f000 ff7e 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800115e:	e032      	b.n	80011c6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <HAL_TIM_Base_MspInit+0xfc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d114      	bne.n	8001194 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116e:	4a18      	ldr	r2, [pc, #96]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6253      	str	r3, [r2, #36]	@ 0x24
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	201d      	movs	r0, #29
 8001188:	f000 ff4b 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800118c:	201d      	movs	r0, #29
 800118e:	f000 ff64 	bl	800205a <HAL_NVIC_EnableIRQ>
}
 8001192:	e018      	b.n	80011c6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a10      	ldr	r2, [pc, #64]	@ (80011dc <HAL_TIM_Base_MspInit+0x100>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d113      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a2:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6253      	str	r3, [r2, #36]	@ 0x24
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_TIM_Base_MspInit+0xf4>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	201e      	movs	r0, #30
 80011bc:	f000 ff31 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011c0:	201e      	movs	r0, #30
 80011c2:	f000 ff4a 	bl	800205a <HAL_NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	@ 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40000800 	.word	0x40000800

080011e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a3e      	ldr	r2, [pc, #248]	@ (80012f8 <HAL_TIM_MspPostInit+0x118>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d154      	bne.n	80012ac <HAL_TIM_MspPostInit+0xcc>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b3e      	ldr	r3, [pc, #248]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a3d      	ldr	r2, [pc, #244]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a37      	ldr	r2, [pc, #220]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b32      	ldr	r3, [pc, #200]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a31      	ldr	r2, [pc, #196]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124a:	2340      	movs	r3, #64	@ 0x40
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800125a:	2302      	movs	r3, #2
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4826      	ldr	r0, [pc, #152]	@ (8001300 <HAL_TIM_MspPostInit+0x120>)
 8001266:	f000 ff91 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126a:	2301      	movs	r3, #1
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800127a:	2302      	movs	r3, #2
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	481f      	ldr	r0, [pc, #124]	@ (8001304 <HAL_TIM_MspPostInit+0x124>)
 8001286:	f000 ff81 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800129a:	2302      	movs	r3, #2
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4818      	ldr	r0, [pc, #96]	@ (8001308 <HAL_TIM_MspPostInit+0x128>)
 80012a6:	f000 ff71 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012aa:	e020      	b.n	80012ee <HAL_TIM_MspPostInit+0x10e>
  else if(htim->Instance==TIM4)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a16      	ldr	r2, [pc, #88]	@ (800130c <HAL_TIM_MspPostInit+0x12c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d11b      	bne.n	80012ee <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_TIM_MspPostInit+0x11c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ce:	2340      	movs	r3, #64	@ 0x40
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012de:	2302      	movs	r3, #2
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <HAL_TIM_MspPostInit+0x124>)
 80012ea:	f000 ff4f 	bl	800218c <HAL_GPIO_Init>
}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	@ 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40000400 	.word	0x40000400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40000800 	.word	0x40000800

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <HAL_UART_MspInit+0x8c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d130      	bne.n	8001394 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_UART_MspInit+0x90>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a1a      	ldr	r2, [pc, #104]	@ (80013a0 <HAL_UART_MspInit+0x90>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_UART_MspInit+0x90>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_UART_MspInit+0x90>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <HAL_UART_MspInit+0x90>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_UART_MspInit+0x90>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001362:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001374:	2307      	movs	r3, #7
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <HAL_UART_MspInit+0x94>)
 8001380:	f000 ff04 	bl	800218c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2025      	movs	r0, #37	@ 0x25
 800138a:	f000 fe4a 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800138e:	2025      	movs	r0, #37	@ 0x25
 8001390:	f000 fe63 	bl	800205a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	@ 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40013800 	.word	0x40013800
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <NMI_Handler+0x4>

080013b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <MemManage_Handler+0x4>

080013c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <UsageFault_Handler+0x4>

080013d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f8:	f000 f8a8 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <TIM2_IRQHandler+0x10>)
 8001406:	f002 fb25 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000007c 	.word	0x2000007c

08001414 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <TIM3_IRQHandler+0x10>)
 800141a:	f002 fb1b 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000bc 	.word	0x200000bc

08001428 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <TIM4_IRQHandler+0x10>)
 800142e:	f002 fb11 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000fc 	.word	0x200000fc

0800143c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <USART1_IRQHandler+0x10>)
 8001442:	f003 fb4f 	bl	8004ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000013c 	.word	0x2000013c

08001450 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800145c:	f7ff fff8 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480b      	ldr	r0, [pc, #44]	@ (8001490 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001462:	490c      	ldr	r1, [pc, #48]	@ (8001494 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001464:	4a0c      	ldr	r2, [pc, #48]	@ (8001498 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a09      	ldr	r2, [pc, #36]	@ (800149c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001478:	4c09      	ldr	r4, [pc, #36]	@ (80014a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001486:	f004 f90b 	bl	80056a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7ff fa65 	bl	8000958 <main>
  bx lr
 800148e:	4770      	bx	lr
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001498:	08005758 	.word	0x08005758
  ldr r2, =_sbss
 800149c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a0:	200001a4 	.word	0x200001a4

080014a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_IRQHandler>

080014a6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 fdab 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f80e 	bl	80014d8 <HAL_InitTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	e001      	b.n	80014cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c8:	f7ff fd98 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_InitTick+0x68>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d022      	beq.n	8001532 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_InitTick+0x6c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_InitTick+0x68>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fdb8 	bl	8002076 <HAL_SYSTICK_Config>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10f      	bne.n	800152c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d809      	bhi.n	8001526 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001512:	2200      	movs	r2, #0
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	f04f 30ff 	mov.w	r0, #4294967295
 800151a:	f000 fd82 	bl	8002022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_InitTick+0x70>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e007      	b.n	8001536 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e004      	b.n	8001536 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000008 	.word	0x20000008
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_IncTick+0x1c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_IncTick+0x20>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4413      	add	r3, r2
 800155a:	4a03      	ldr	r2, [pc, #12]	@ (8001568 <HAL_IncTick+0x1c>)
 800155c:	6013      	str	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200001a0 	.word	0x200001a0
 800156c:	20000008 	.word	0x20000008

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	@ (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	200001a0 	.word	0x200001a0

08001584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	@ 0x38
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e127      	b.n	80017f4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d115      	bne.n	80015de <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b8e      	ldr	r3, [pc, #568]	@ (80017fc <HAL_ADC_Init+0x278>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a8d      	ldr	r2, [pc, #564]	@ (80017fc <HAL_ADC_Init+0x278>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4b8b      	ldr	r3, [pc, #556]	@ (80017fc <HAL_ADC_Init+0x278>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fd3f 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 80ff 	bne.w	80017ea <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015f4:	f023 0302 	bic.w	r3, r3, #2
 80015f8:	f043 0202 	orr.w	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001600:	4b7f      	ldr	r3, [pc, #508]	@ (8001800 <HAL_ADC_Init+0x27c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	497c      	ldr	r1, [pc, #496]	@ (8001800 <HAL_ADC_Init+0x27c>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800161a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001622:	4619      	mov	r1, r3
 8001624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001628:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800163e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001644:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	2302      	movs	r3, #2
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001666:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800166a:	4313      	orrs	r3, r2
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001672:	2b10      	cmp	r3, #16
 8001674:	d007      	beq.n	8001686 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800167e:	4313      	orrs	r3, r2
 8001680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001682:	4313      	orrs	r3, r2
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001690:	2b40      	cmp	r3, #64	@ 0x40
 8001692:	d04f      	beq.n	8001734 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800169a:	4313      	orrs	r3, r2
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016a6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6912      	ldr	r2, [r2, #16]
 80016ac:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80016b0:	d003      	beq.n	80016ba <HAL_ADC_Init+0x136>
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6912      	ldr	r2, [r2, #16]
 80016b6:	2a01      	cmp	r2, #1
 80016b8:	d102      	bne.n	80016c0 <HAL_ADC_Init+0x13c>
 80016ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016be:	e000      	b.n	80016c2 <HAL_ADC_Init+0x13e>
 80016c0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80016c2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016c6:	4313      	orrs	r3, r2
 80016c8:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d125      	bne.n	8001720 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d114      	bne.n	8001708 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80016e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	fa92 f2a2 	rbit	r2, r2
 80016f0:	617a      	str	r2, [r7, #20]
  return result;
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	fab2 f282 	clz	r2, r2
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	4093      	lsls	r3, r2
 80016fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001702:	4313      	orrs	r3, r2
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
 8001706:	e00b      	b.n	8001720 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_ADC_Init+0x280>)
 8001728:	4013      	ands	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001730:	430b      	orrs	r3, r1
 8001732:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <HAL_ADC_Init+0x284>)
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001744:	430b      	orrs	r3, r1
 8001746:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001750:	d003      	beq.n	800175a <HAL_ADC_Init+0x1d6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d119      	bne.n	800178e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	3b01      	subs	r3, #1
 800176a:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800176e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	fa92 f2a2 	rbit	r2, r2
 8001776:	60fa      	str	r2, [r7, #12]
  return result;
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	fab2 f282 	clz	r2, r2
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	fa03 f202 	lsl.w	r2, r3, r2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	631a      	str	r2, [r3, #48]	@ 0x30
 800178c:	e007      	b.n	800179e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800179c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_ADC_Init+0x288>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d10b      	bne.n	80017c6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	f023 0303 	bic.w	r3, r3, #3
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017c4:	e014      	b.n	80017f0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	f023 0312 	bic.w	r3, r3, #18
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80017e8:	e002      	b.n	80017f0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3738      	adds	r7, #56	@ 0x38
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40012700 	.word	0x40012700
 8001804:	fcfc16ff 	.word	0xfcfc16ff
 8001808:	c0fff189 	.word	0xc0fff189
 800180c:	bf80fffe 	.word	0xbf80fffe

08001810 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Start+0x1a>
 8001826:	2302      	movs	r3, #2
 8001828:	e04e      	b.n	80018c8 <HAL_ADC_Start+0xb8>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fa80 	bl	8001d38 <ADC_Enable>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d141      	bne.n	80018c6 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800186c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800187c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001880:	d106      	bne.n	8001890 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001886:	f023 0206 	bic.w	r2, r3, #6
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	651a      	str	r2, [r3, #80]	@ 0x50
 800188e:	e002      	b.n	8001896 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018a6:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_Stop+0x1a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e01a      	b.n	8001920 <HAL_ADC_Stop+0x50>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fa7c 	bl	8001df0 <ADC_ConversionStop_Disable>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001944:	d113      	bne.n	800196e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001954:	d10b      	bne.n	800196e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	f043 0220 	orr.w	r2, r3, #32
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e068      	b.n	8001a40 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800196e:	f7ff fdff 	bl	8001570 <HAL_GetTick>
 8001972:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001974:	e021      	b.n	80019ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d01d      	beq.n	80019ba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_ADC_PollForConversion+0x6c>
 8001984:	f7ff fdf4 	bl	8001570 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d212      	bcs.n	80019ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10b      	bne.n	80019ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f043 0204 	orr.w	r2, r3, #4
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e042      	b.n	8001a40 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0d6      	beq.n	8001976 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d104      	bne.n	80019da <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f06f 0212 	mvn.w	r2, #18
 80019d8:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d124      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11f      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d111      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x20>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e14f      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x2c0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b06      	cmp	r3, #6
 8001a8e:	d81c      	bhi.n	8001aca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b05      	subs	r3, #5
 8001aa2:	221f      	movs	r2, #31
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4019      	ands	r1, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b05      	subs	r3, #5
 8001abc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac8:	e07e      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d81c      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b23      	subs	r3, #35	@ 0x23
 8001ae4:	221f      	movs	r2, #31
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4019      	ands	r1, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b23      	subs	r3, #35	@ 0x23
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b0a:	e05d      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b12      	cmp	r3, #18
 8001b12:	d81c      	bhi.n	8001b4e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b41      	subs	r3, #65	@ 0x41
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	@ 0x41
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b4c:	e03c      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b18      	cmp	r3, #24
 8001b54:	d81c      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b5f      	subs	r3, #95	@ 0x5f
 8001b68:	221f      	movs	r2, #31
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4019      	ands	r1, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b5f      	subs	r3, #95	@ 0x5f
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b8e:	e01b      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b7d      	subs	r3, #125	@ 0x7d
 8001ba2:	221f      	movs	r2, #31
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4019      	ands	r1, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b7d      	subs	r3, #125	@ 0x7d
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	d81a      	bhi.n	8001c06 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6959      	ldr	r1, [r3, #20]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	2207      	movs	r2, #7
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4019      	ands	r1, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6898      	ldr	r0, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	e05d      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b13      	cmp	r3, #19
 8001c0c:	d81c      	bhi.n	8001c48 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6919      	ldr	r1, [r3, #16]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b1e      	subs	r3, #30
 8001c20:	2207      	movs	r2, #7
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	4019      	ands	r1, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6898      	ldr	r0, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	3b1e      	subs	r3, #30
 8001c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	e03c      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b1d      	cmp	r3, #29
 8001c4e:	d81c      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68d9      	ldr	r1, [r3, #12]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b3c      	subs	r3, #60	@ 0x3c
 8001c62:	2207      	movs	r2, #7
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6898      	ldr	r0, [r3, #8]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b3c      	subs	r3, #60	@ 0x3c
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	e01b      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b5a      	subs	r3, #90	@ 0x5a
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	4019      	ands	r1, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6898      	ldr	r0, [r3, #8]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b5a      	subs	r3, #90	@ 0x5a
 8001cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d003      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cce:	2b11      	cmp	r3, #17
 8001cd0:	d121      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <HAL_ADC_ConfigChannel+0x2cc>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11b      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <HAL_ADC_ConfigChannel+0x2cc>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <HAL_ADC_ConfigChannel+0x2cc>)
 8001ce4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ce8:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d111      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2d0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <HAL_ADC_ConfigChannel+0x2d4>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	0c9a      	lsrs	r2, r3, #18
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001d08:	e002      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f9      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40012700 	.word	0x40012700
 8001d30:	20000000 	.word	0x20000000
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d52:	2b40      	cmp	r3, #64	@ 0x40
 8001d54:	d043      	beq.n	8001dde <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <ADC_Enable+0xb0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a20      	ldr	r2, [pc, #128]	@ (8001dec <ADC_Enable+0xb4>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9a      	lsrs	r2, r3, #18
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d7a:	e002      	b.n	8001d82 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001d88:	f7ff fbf2 	bl	8001570 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d8e:	e01f      	b.n	8001dd0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001d90:	f7ff fbee 	bl	8001570 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d918      	bls.n	8001dd0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da8:	2b40      	cmp	r3, #64	@ 0x40
 8001daa:	d011      	beq.n	8001dd0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e007      	b.n	8001de0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dda:	2b40      	cmp	r3, #64	@ 0x40
 8001ddc:	d1d8      	bne.n	8001d90 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e06:	2b40      	cmp	r3, #64	@ 0x40
 8001e08:	d12e      	bne.n	8001e68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e1a:	f7ff fba9 	bl	8001570 <HAL_GetTick>
 8001e1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e20:	e01b      	b.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001e22:	f7ff fba5 	bl	8001570 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d914      	bls.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3a:	2b40      	cmp	r3, #64	@ 0x40
 8001e3c:	d10d      	bne.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	d0dc      	beq.n	8001e22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4906      	ldr	r1, [pc, #24]	@ (8001f0c <__NVIC_EnableIRQ+0x34>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	@ (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	@ (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff90 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff2d 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff42 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff90 	bl	8001f64 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5f 	bl	8001f10 <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff35 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d008      	beq.n	80020b8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e022      	b.n	80020fe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 020e 	bic.w	r2, r2, #14
 80020c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f003 021c 	and.w	r2, r3, #28
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d005      	beq.n	800212c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2204      	movs	r2, #4
 8002124:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e029      	b.n	8002180 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 020e 	bic.w	r2, r2, #14
 800213a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f003 021c 	and.w	r2, r3, #28
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
    }
  }
  return status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80021a2:	e160      	b.n	8002466 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8152 	beq.w	8002460 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d005      	beq.n	80021d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 0201 	and.w	r2, r3, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b03      	cmp	r3, #3
 8002240:	d017      	beq.n	8002272 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d123      	bne.n	80022c6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0203 	and.w	r2, r3, #3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80ac 	beq.w	8002460 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002308:	4b5e      	ldr	r3, [pc, #376]	@ (8002484 <HAL_GPIO_Init+0x2f8>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a5d      	ldr	r2, [pc, #372]	@ (8002484 <HAL_GPIO_Init+0x2f8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	4b5b      	ldr	r3, [pc, #364]	@ (8002484 <HAL_GPIO_Init+0x2f8>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002320:	4a59      	ldr	r2, [pc, #356]	@ (8002488 <HAL_GPIO_Init+0x2fc>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a51      	ldr	r2, [pc, #324]	@ (800248c <HAL_GPIO_Init+0x300>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d025      	beq.n	8002398 <HAL_GPIO_Init+0x20c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a50      	ldr	r2, [pc, #320]	@ (8002490 <HAL_GPIO_Init+0x304>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d01f      	beq.n	8002394 <HAL_GPIO_Init+0x208>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_GPIO_Init+0x308>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d019      	beq.n	8002390 <HAL_GPIO_Init+0x204>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_GPIO_Init+0x30c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_GPIO_Init+0x200>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4d      	ldr	r2, [pc, #308]	@ (800249c <HAL_GPIO_Init+0x310>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1fc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4c      	ldr	r2, [pc, #304]	@ (80024a0 <HAL_GPIO_Init+0x314>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1f8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a4b      	ldr	r2, [pc, #300]	@ (80024a4 <HAL_GPIO_Init+0x318>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1f4>
 800237c:	2306      	movs	r3, #6
 800237e:	e00c      	b.n	800239a <HAL_GPIO_Init+0x20e>
 8002380:	2307      	movs	r3, #7
 8002382:	e00a      	b.n	800239a <HAL_GPIO_Init+0x20e>
 8002384:	2305      	movs	r3, #5
 8002386:	e008      	b.n	800239a <HAL_GPIO_Init+0x20e>
 8002388:	2304      	movs	r3, #4
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x20e>
 800238c:	2303      	movs	r3, #3
 800238e:	e004      	b.n	800239a <HAL_GPIO_Init+0x20e>
 8002390:	2302      	movs	r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x20e>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_GPIO_Init+0x20e>
 8002398:	2300      	movs	r3, #0
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023aa:	4937      	ldr	r1, [pc, #220]	@ (8002488 <HAL_GPIO_Init+0x2fc>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b8:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023dc:	4a32      	ldr	r2, [pc, #200]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e2:	4b31      	ldr	r3, [pc, #196]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002406:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240c:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002430:	4a1d      	ldr	r2, [pc, #116]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800245a:	4a13      	ldr	r2, [pc, #76]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f ae97 	bne.w	80021a4 <HAL_GPIO_Init+0x18>
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40010000 	.word	0x40010000
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40021400 	.word	0x40021400
 80024a4:	40021800 	.word	0x40021800
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e31d      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ee:	4b94      	ldr	r3, [pc, #592]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f8:	4b91      	ldr	r3, [pc, #580]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002500:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d07b      	beq.n	8002606 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d006      	beq.n	8002522 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d10f      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b87      	ldr	r3, [pc, #540]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06a      	beq.n	8002604 <HAL_RCC_OscConfig+0x128>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d166      	bne.n	8002604 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e2f7      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7e      	ldr	r2, [pc, #504]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e02d      	b.n	80025ac <HAL_RCC_OscConfig+0xd0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0x96>
 8002558:	4b79      	ldr	r3, [pc, #484]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a78      	ldr	r2, [pc, #480]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b76      	ldr	r3, [pc, #472]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a75      	ldr	r2, [pc, #468]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e01c      	b.n	80025ac <HAL_RCC_OscConfig+0xd0>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b05      	cmp	r3, #5
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0xb8>
 800257a:	4b71      	ldr	r3, [pc, #452]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a70      	ldr	r2, [pc, #448]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b6e      	ldr	r3, [pc, #440]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6d      	ldr	r2, [pc, #436]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xd0>
 8002594:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a69      	ldr	r2, [pc, #420]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a66      	ldr	r2, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe ffdc 	bl	8001570 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe ffd8 	bl	8001570 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e2ad      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe ffc8 	bl	8001570 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7fe ffc4 	bl	8001570 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	@ 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e299      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025f6:	4b52      	ldr	r3, [pc, #328]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d05a      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d005      	beq.n	8002624 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d119      	bne.n	8002652 <HAL_RCC_OscConfig+0x176>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002624:	4b46      	ldr	r3, [pc, #280]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_OscConfig+0x160>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e276      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	493d      	ldr	r1, [pc, #244]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002650:	e03a      	b.n	80026c8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d020      	beq.n	800269c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265a:	4b3a      	ldr	r3, [pc, #232]	@ (8002744 <HAL_RCC_OscConfig+0x268>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe ff86 	bl	8001570 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe ff82 	bl	8001570 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e257      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800267a:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b2e      	ldr	r3, [pc, #184]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	492a      	ldr	r1, [pc, #168]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269c:	4b29      	ldr	r3, [pc, #164]	@ (8002744 <HAL_RCC_OscConfig+0x268>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe ff65 	bl	8001570 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe ff61 	bl	8001570 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e236      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026bc:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80b8 	beq.w	8002846 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d170      	bne.n	80027be <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026dc:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x218>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e21a      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002700:	429a      	cmp	r2, r3
 8002702:	d921      	bls.n	8002748 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fc7d 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e208      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002718:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4906      	ldr	r1, [pc, #24]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	4901      	ldr	r1, [pc, #4]	@ (8002740 <HAL_RCC_OscConfig+0x264>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
 800273e:	e020      	b.n	8002782 <HAL_RCC_OscConfig+0x2a6>
 8002740:	40023800 	.word	0x40023800
 8002744:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002748:	4b99      	ldr	r3, [pc, #612]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4996      	ldr	r1, [pc, #600]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275a:	4b95      	ldr	r3, [pc, #596]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	4991      	ldr	r1, [pc, #580]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fc48 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1d3      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	0b5b      	lsrs	r3, r3, #13
 8002788:	3301      	adds	r3, #1
 800278a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002792:	4a87      	ldr	r2, [pc, #540]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	0912      	lsrs	r2, r2, #4
 8002798:	f002 020f 	and.w	r2, r2, #15
 800279c:	4985      	ldr	r1, [pc, #532]	@ (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 800279e:	5c8a      	ldrb	r2, [r1, r2]
 80027a0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027a2:	4a85      	ldr	r2, [pc, #532]	@ (80029b8 <HAL_RCC_OscConfig+0x4dc>)
 80027a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027a6:	4b85      	ldr	r3, [pc, #532]	@ (80029bc <HAL_RCC_OscConfig+0x4e0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fe94 	bl	80014d8 <HAL_InitTick>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d045      	beq.n	8002846 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	e1b5      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d029      	beq.n	800281a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027c6:	4b7e      	ldr	r3, [pc, #504]	@ (80029c0 <HAL_RCC_OscConfig+0x4e4>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fed0 	bl	8001570 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d4:	f7fe fecc 	bl	8001570 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1a1      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027e6:	4b72      	ldr	r3, [pc, #456]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f2:	4b6f      	ldr	r3, [pc, #444]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	496c      	ldr	r1, [pc, #432]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002804:	4b6a      	ldr	r3, [pc, #424]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	4967      	ldr	r1, [pc, #412]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800281a:	4b69      	ldr	r3, [pc, #420]	@ (80029c0 <HAL_RCC_OscConfig+0x4e4>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fea6 	bl	8001570 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002828:	f7fe fea2 	bl	8001570 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e177      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800283a:	4b5d      	ldr	r3, [pc, #372]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d030      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b5a      	ldr	r3, [pc, #360]	@ (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7fe fe86 	bl	8001570 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe fe82 	bl	8001570 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e157      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800287a:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x38c>
 8002886:	e015      	b.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002888:	4b4e      	ldr	r3, [pc, #312]	@ (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7fe fe6f 	bl	8001570 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002896:	f7fe fe6b 	bl	8001570 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e140      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a8:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80028aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80b5 	beq.w	8002a2c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b3a      	ldr	r3, [pc, #232]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10d      	bne.n	80028ee <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	4b37      	ldr	r3, [pc, #220]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	4a36      	ldr	r2, [pc, #216]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80028de:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ea:	2301      	movs	r3, #1
 80028ec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d118      	bne.n	800292c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a32      	ldr	r2, [pc, #200]	@ (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7fe fe33 	bl	8001570 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7fe fe2f 	bl	8001570 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	@ 0x64
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e104      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x466>
 8002934:	4b1e      	ldr	r3, [pc, #120]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002938:	4a1d      	ldr	r2, [pc, #116]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002940:	e02d      	b.n	800299e <HAL_RCC_OscConfig+0x4c2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x488>
 800294a:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800294c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294e:	4a18      	ldr	r2, [pc, #96]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002954:	6353      	str	r3, [r2, #52]	@ 0x34
 8002956:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295a:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800295c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002960:	6353      	str	r3, [r2, #52]	@ 0x34
 8002962:	e01c      	b.n	800299e <HAL_RCC_OscConfig+0x4c2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d10c      	bne.n	8002986 <HAL_RCC_OscConfig+0x4aa>
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800296e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002970:	4a0f      	ldr	r2, [pc, #60]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002976:	6353      	str	r3, [r2, #52]	@ 0x34
 8002978:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800297a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297c:	4a0c      	ldr	r2, [pc, #48]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002982:	6353      	str	r3, [r2, #52]	@ 0x34
 8002984:	e00b      	b.n	800299e <HAL_RCC_OscConfig+0x4c2>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298a:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 800298c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002990:	6353      	str	r3, [r2, #52]	@ 0x34
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002996:	4a06      	ldr	r2, [pc, #24]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 8002998:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800299c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d024      	beq.n	80029f0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fde3 	bl	8001570 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ac:	e019      	b.n	80029e2 <HAL_RCC_OscConfig+0x506>
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08005730 	.word	0x08005730
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004
 80029c0:	42470020 	.word	0x42470020
 80029c4:	42470680 	.word	0x42470680
 80029c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe fdd0 	bl	8001570 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0a3      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e2:	4b54      	ldr	r3, [pc, #336]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0ee      	beq.n	80029cc <HAL_RCC_OscConfig+0x4f0>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f0:	f7fe fdbe 	bl	8001570 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fdba 	bl	8001570 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e08d      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a0e:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ee      	bne.n	80029f8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	4a43      	ldr	r2, [pc, #268]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d079      	beq.n	8002b28 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d056      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d13b      	bne.n	8002aba <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <HAL_RCC_OscConfig+0x65c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fd92 	bl	8001570 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fd8e 	bl	8001570 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e063      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a62:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	4319      	orrs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	430b      	orrs	r3, r1
 8002a86:	492b      	ldr	r1, [pc, #172]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <HAL_RCC_OscConfig+0x65c>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fd6d 	bl	8001570 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe fd69 	bl	8001570 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e03e      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aac:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x5be>
 8002ab8:	e036      	b.n	8002b28 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <HAL_RCC_OscConfig+0x65c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fd56 	bl	8001570 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe fd52 	bl	8001570 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e027      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5ec>
 8002ae6:	e01f      	b.n	8002b28 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e01a      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <HAL_RCC_OscConfig+0x658>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d10d      	bne.n	8002b24 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470060 	.word	0x42470060

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e11a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b8f      	ldr	r3, [pc, #572]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d919      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x34>
 8002b64:	4b8a      	ldr	r3, [pc, #552]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a89      	ldr	r2, [pc, #548]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b87      	ldr	r3, [pc, #540]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0201 	bic.w	r2, r3, #1
 8002b78:	4985      	ldr	r1, [pc, #532]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b80:	4b83      	ldr	r3, [pc, #524]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0f9      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	497a      	ldr	r1, [pc, #488]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 808e 	beq.w	8002cda <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc6:	4b73      	ldr	r3, [pc, #460]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d121      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0d7      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bde:	4b6d      	ldr	r3, [pc, #436]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0cb      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bf6:	4b67      	ldr	r3, [pc, #412]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0bf      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c06:	4b63      	ldr	r3, [pc, #396]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0b7      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b5f      	ldr	r3, [pc, #380]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	495c      	ldr	r1, [pc, #368]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fe fca2 	bl	8001570 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d112      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe fc9a 	bl	8001570 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e09b      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c4e:	4b51      	ldr	r3, [pc, #324]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d1ee      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xfc>
 8002c5a:	e03e      	b.n	8002cda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d112      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c66:	f7fe fc83 	bl	8001570 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e084      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7c:	4b45      	ldr	r3, [pc, #276]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d1ee      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x12a>
 8002c88:	e027      	b.n	8002cda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d11d      	bne.n	8002cce <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe fc6c 	bl	8001570 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e06d      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002caa:	4b3a      	ldr	r3, [pc, #232]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x158>
 8002cb6:	e010      	b.n	8002cda <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7fe fc5a 	bl	8001570 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e05b      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cce:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ee      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cda:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d219      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x1be>
 8002cee:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a27      	ldr	r2, [pc, #156]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	4923      	ldr	r1, [pc, #140]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <HAL_RCC_ClockConfig+0x254>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e034      	b.n	8002d86 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4917      	ldr	r1, [pc, #92]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490f      	ldr	r1, [pc, #60]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f823 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <HAL_RCC_ClockConfig+0x258>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490b      	ldr	r1, [pc, #44]	@ (8002d98 <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <HAL_RCC_ClockConfig+0x260>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x264>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fbac 	bl	80014d8 <HAL_InitTick>
 8002d80:	4603      	mov	r3, r0
 8002d82:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d84:	7afb      	ldrb	r3, [r7, #11]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00
 8002d94:	40023800 	.word	0x40023800
 8002d98:	08005730 	.word	0x08005730
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da8:	b092      	sub	sp, #72	@ 0x48
 8002daa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002dac:	4b79      	ldr	r3, [pc, #484]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	f200 80d5 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x1c8>
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x28>
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x2e>
 8002dca:	e0cf      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b72      	ldr	r3, [pc, #456]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002dce:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002dd0:	e0da      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd2:	4b72      	ldr	r3, [pc, #456]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002dd4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002dd6:	e0d7      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dda:	0c9b      	lsrs	r3, r3, #18
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002de2:	5c9b      	ldrb	r3, [r3, r2]
 8002de4:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de8:	0d9b      	lsrs	r3, r3, #22
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df2:	4b68      	ldr	r3, [pc, #416]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d05d      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	4611      	mov	r1, r2
 8002e06:	4604      	mov	r4, r0
 8002e08:	460d      	mov	r5, r1
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	f04f 0000 	mov.w	r0, #0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	0159      	lsls	r1, r3, #5
 8002e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e1c:	0150      	lsls	r0, r2, #5
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4621      	mov	r1, r4
 8002e24:	1a51      	subs	r1, r2, r1
 8002e26:	6139      	str	r1, [r7, #16]
 8002e28:	4629      	mov	r1, r5
 8002e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	018b      	lsls	r3, r1, #6
 8002e40:	4651      	mov	r1, sl
 8002e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e46:	4651      	mov	r1, sl
 8002e48:	018a      	lsls	r2, r1, #6
 8002e4a:	46d4      	mov	ip, sl
 8002e4c:	ebb2 080c 	subs.w	r8, r2, ip
 8002e50:	4659      	mov	r1, fp
 8002e52:	eb63 0901 	sbc.w	r9, r3, r1
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e6a:	4690      	mov	r8, r2
 8002e6c:	4699      	mov	r9, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	eb18 0303 	adds.w	r3, r8, r3
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	462b      	mov	r3, r5
 8002e78:	eb49 0303 	adc.w	r3, r9, r3
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	024b      	lsls	r3, r1, #9
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	4604      	mov	r4, r0
 8002e94:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e98:	4601      	mov	r1, r0
 8002e9a:	024a      	lsls	r2, r1, #9
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eac:	f7fd f966 	bl	800017c <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb8:	e055      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ec2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	464b      	mov	r3, r9
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	0159      	lsls	r1, r3, #5
 8002ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed8:	0150      	lsls	r0, r2, #5
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	46c4      	mov	ip, r8
 8002ee0:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	468c      	mov	ip, r1
 8002eea:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002efa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002efe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f02:	ebb2 040a 	subs.w	r4, r2, sl
 8002f06:	eb63 050b 	sbc.w	r5, r3, fp
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	00eb      	lsls	r3, r5, #3
 8002f14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f18:	00e2      	lsls	r2, r4, #3
 8002f1a:	4614      	mov	r4, r2
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	18e3      	adds	r3, r4, r3
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	460b      	mov	r3, r1
 8002f26:	eb45 0303 	adc.w	r3, r5, r3
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f38:	4629      	mov	r1, r5
 8002f3a:	028b      	lsls	r3, r1, #10
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4604      	mov	r4, r0
 8002f42:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f46:	4601      	mov	r1, r0
 8002f48:	028a      	lsls	r2, r1, #10
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f50:	2200      	movs	r2, #0
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	61fa      	str	r2, [r7, #28]
 8002f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5a:	f7fd f90f 	bl	800017c <__aeabi_uldivmod>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4613      	mov	r3, r2
 8002f64:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8002f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f68:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002f6a:	e00d      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0b5b      	lsrs	r3, r3, #13
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002f86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3748      	adds	r7, #72	@ 0x48
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	007a1200 	.word	0x007a1200
 8002fa0:	08005724 	.word	0x08005724

08002fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b02      	ldr	r3, [pc, #8]	@ (8002fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fbc:	f7ff fff2 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	@ (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08005740 	.word	0x08005740

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffde 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	08005740 	.word	0x08005740

08003008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003014:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d12c      	bne.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003020:	4b26      	ldr	r3, [pc, #152]	@ (80030bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800302c:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e016      	b.n	8003066 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003042:	6253      	str	r3, [r2, #36]	@ 0x24
 8003044:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003058:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003064:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800306c:	d105      	bne.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003074:	d101      	bne.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003076:	2301      	movs	r3, #1
 8003078:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003080:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0f      	ldr	r2, [pc, #60]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 0201 	bic.w	r2, r3, #1
 8003094:	490b      	ldr	r1, [pc, #44]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e031      	b.n	800313e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fff4 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f001 f862 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d001      	beq.n	8003160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e03a      	b.n	80031d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003180:	d00e      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x58>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a16      	ldr	r2, [pc, #88]	@ (80031e0 <HAL_TIM_Base_Start_IT+0x98>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x58>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a14      	ldr	r2, [pc, #80]	@ (80031e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x58>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d111      	bne.n	80031c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d010      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c2:	e007      	b.n	80031d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40010800 	.word	0x40010800

080031ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e031      	b.n	8003262 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f829 	bl	800326a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 ffd0 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_TIM_OC_Start_IT+0x28>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e022      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x6e>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d109      	bne.n	80032be <HAL_TIM_OC_Start_IT+0x42>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e015      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x6e>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d109      	bne.n	80032d8 <HAL_TIM_OC_Start_IT+0x5c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e008      	b.n	80032ea <HAL_TIM_OC_Start_IT+0x6e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e09c      	b.n	800342c <HAL_TIM_OC_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_OC_Start_IT+0x86>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003300:	e013      	b.n	800332a <HAL_TIM_OC_Start_IT+0xae>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d104      	bne.n	8003312 <HAL_TIM_OC_Start_IT+0x96>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003310:	e00b      	b.n	800332a <HAL_TIM_OC_Start_IT+0xae>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d104      	bne.n	8003322 <HAL_TIM_OC_Start_IT+0xa6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003320:	e003      	b.n	800332a <HAL_TIM_OC_Start_IT+0xae>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d841      	bhi.n	80033b4 <HAL_TIM_OC_Start_IT+0x138>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <HAL_TIM_OC_Start_IT+0xbc>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	0800336d 	.word	0x0800336d
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	0800337f 	.word	0x0800337f
 800334c:	080033b5 	.word	0x080033b5
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	08003391 	.word	0x08003391
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033a3 	.word	0x080033a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0202 	orr.w	r2, r2, #2
 800337a:	60da      	str	r2, [r3, #12]
      break;
 800337c:	e01d      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0204 	orr.w	r2, r2, #4
 800338c:	60da      	str	r2, [r3, #12]
      break;
 800338e:	e014      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0208 	orr.w	r2, r2, #8
 800339e:	60da      	str	r2, [r3, #12]
      break;
 80033a0:	e00b      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0210 	orr.w	r2, r2, #16
 80033b0:	60da      	str	r2, [r3, #12]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      break;
 80033b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d134      	bne.n	800342a <HAL_TIM_OC_Start_IT+0x1ae>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2201      	movs	r2, #1
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fa10 	bl	80047ee <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d00e      	beq.n	80033f6 <HAL_TIM_OC_Start_IT+0x17a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <HAL_TIM_OC_Start_IT+0x1b8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_TIM_OC_Start_IT+0x17a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <HAL_TIM_OC_Start_IT+0x1bc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_OC_Start_IT+0x17a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a12      	ldr	r2, [pc, #72]	@ (800343c <HAL_TIM_OC_Start_IT+0x1c0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <HAL_TIM_OC_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d010      	beq.n	800342a <HAL_TIM_OC_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	e007      	b.n	800342a <HAL_TIM_OC_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40010800 	.word	0x40010800

08003440 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d841      	bhi.n	80034d8 <HAL_TIM_OC_Stop_IT+0x98>
 8003454:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <HAL_TIM_OC_Stop_IT+0x1c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	080034d9 	.word	0x080034d9
 8003464:	080034d9 	.word	0x080034d9
 8003468:	080034d9 	.word	0x080034d9
 800346c:	080034a3 	.word	0x080034a3
 8003470:	080034d9 	.word	0x080034d9
 8003474:	080034d9 	.word	0x080034d9
 8003478:	080034d9 	.word	0x080034d9
 800347c:	080034b5 	.word	0x080034b5
 8003480:	080034d9 	.word	0x080034d9
 8003484:	080034d9 	.word	0x080034d9
 8003488:	080034d9 	.word	0x080034d9
 800348c:	080034c7 	.word	0x080034c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0202 	bic.w	r2, r2, #2
 800349e:	60da      	str	r2, [r3, #12]
      break;
 80034a0:	e01d      	b.n	80034de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0204 	bic.w	r2, r2, #4
 80034b0:	60da      	str	r2, [r3, #12]
      break;
 80034b2:	e014      	b.n	80034de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0208 	bic.w	r2, r2, #8
 80034c2:	60da      	str	r2, [r3, #12]
      break;
 80034c4:	e00b      	b.n	80034de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0210 	bic.w	r2, r2, #16
 80034d4:	60da      	str	r2, [r3, #12]
      break;
 80034d6:	e002      	b.n	80034de <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      break;
 80034dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d132      	bne.n	800354a <HAL_TIM_OC_Stop_IT+0x10a>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 f97e 	bl	80047ee <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <HAL_TIM_OC_Stop_IT+0xd2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_TIM_OC_Stop_IT+0xe2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003520:	e013      	b.n	800354a <HAL_TIM_OC_Stop_IT+0x10a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d104      	bne.n	8003532 <HAL_TIM_OC_Stop_IT+0xf2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003530:	e00b      	b.n	800354a <HAL_TIM_OC_Stop_IT+0x10a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d104      	bne.n	8003542 <HAL_TIM_OC_Stop_IT+0x102>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003540:	e003      	b.n	800354a <HAL_TIM_OC_Stop_IT+0x10a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e031      	b.n	80035ca <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f829 	bl	80035d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 fe1c 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_TIM_PWM_Start+0x24>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e022      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d109      	bne.n	8003622 <HAL_TIM_PWM_Start+0x3e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e015      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d109      	bne.n	800363c <HAL_TIM_PWM_Start+0x58>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e008      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e051      	b.n	80036fa <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0x82>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003664:	e013      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start+0x92>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003674:	e00b      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003684:	e003      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f001 f8a9 	bl	80047ee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a4:	d00e      	beq.n	80036c4 <HAL_TIM_PWM_Start+0xe0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <HAL_TIM_PWM_Start+0x120>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_TIM_PWM_Start+0xe0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <HAL_TIM_PWM_Start+0x124>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_TIM_PWM_Start+0xe0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a13      	ldr	r2, [pc, #76]	@ (800370c <HAL_TIM_PWM_Start+0x128>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d111      	bne.n	80036e8 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d010      	beq.n	80036f8 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e6:	e007      	b.n	80036f8 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40010800 	.word	0x40010800

08003710 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e031      	b.n	8003786 <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f829 	bl	800378e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	4619      	mov	r1, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 fd3e 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <HAL_TIM_IC_Start_IT+0x1e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e013      	b.n	80037e6 <HAL_TIM_IC_Start_IT+0x46>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_IC_Start_IT+0x2e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e00b      	b.n	80037e6 <HAL_TIM_IC_Start_IT+0x46>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d104      	bne.n	80037de <HAL_TIM_IC_Start_IT+0x3e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e003      	b.n	80037e6 <HAL_TIM_IC_Start_IT+0x46>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037e8:	7bbb      	ldrb	r3, [r7, #14]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d001      	beq.n	80037f2 <HAL_TIM_IC_Start_IT+0x52>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e09c      	b.n	800392c <HAL_TIM_IC_Start_IT+0x18c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_IC_Start_IT+0x62>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003800:	e013      	b.n	800382a <HAL_TIM_IC_Start_IT+0x8a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d104      	bne.n	8003812 <HAL_TIM_IC_Start_IT+0x72>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003810:	e00b      	b.n	800382a <HAL_TIM_IC_Start_IT+0x8a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d104      	bne.n	8003822 <HAL_TIM_IC_Start_IT+0x82>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003820:	e003      	b.n	800382a <HAL_TIM_IC_Start_IT+0x8a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d841      	bhi.n	80038b4 <HAL_TIM_IC_Start_IT+0x114>
 8003830:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <HAL_TIM_IC_Start_IT+0x98>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800386d 	.word	0x0800386d
 800383c:	080038b5 	.word	0x080038b5
 8003840:	080038b5 	.word	0x080038b5
 8003844:	080038b5 	.word	0x080038b5
 8003848:	0800387f 	.word	0x0800387f
 800384c:	080038b5 	.word	0x080038b5
 8003850:	080038b5 	.word	0x080038b5
 8003854:	080038b5 	.word	0x080038b5
 8003858:	08003891 	.word	0x08003891
 800385c:	080038b5 	.word	0x080038b5
 8003860:	080038b5 	.word	0x080038b5
 8003864:	080038b5 	.word	0x080038b5
 8003868:	080038a3 	.word	0x080038a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0202 	orr.w	r2, r2, #2
 800387a:	60da      	str	r2, [r3, #12]
      break;
 800387c:	e01d      	b.n	80038ba <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0204 	orr.w	r2, r2, #4
 800388c:	60da      	str	r2, [r3, #12]
      break;
 800388e:	e014      	b.n	80038ba <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0208 	orr.w	r2, r2, #8
 800389e:	60da      	str	r2, [r3, #12]
      break;
 80038a0:	e00b      	b.n	80038ba <HAL_TIM_IC_Start_IT+0x11a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0210 	orr.w	r2, r2, #16
 80038b0:	60da      	str	r2, [r3, #12]
      break;
 80038b2:	e002      	b.n	80038ba <HAL_TIM_IC_Start_IT+0x11a>
    }

    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d134      	bne.n	800392a <HAL_TIM_IC_Start_IT+0x18a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 ff90 	bl	80047ee <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d6:	d00e      	beq.n	80038f6 <HAL_TIM_IC_Start_IT+0x156>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a15      	ldr	r2, [pc, #84]	@ (8003934 <HAL_TIM_IC_Start_IT+0x194>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_TIM_IC_Start_IT+0x156>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <HAL_TIM_IC_Start_IT+0x198>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_TIM_IC_Start_IT+0x156>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a12      	ldr	r2, [pc, #72]	@ (800393c <HAL_TIM_IC_Start_IT+0x19c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d111      	bne.n	800391a <HAL_TIM_IC_Start_IT+0x17a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d010      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x18a>
      {
        __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	e007      	b.n	800392a <HAL_TIM_IC_Start_IT+0x18a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40010800 	.word	0x40010800

08003940 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b0c      	cmp	r3, #12
 8003952:	d841      	bhi.n	80039d8 <HAL_TIM_IC_Stop_IT+0x98>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003991 	.word	0x08003991
 8003960:	080039d9 	.word	0x080039d9
 8003964:	080039d9 	.word	0x080039d9
 8003968:	080039d9 	.word	0x080039d9
 800396c:	080039a3 	.word	0x080039a3
 8003970:	080039d9 	.word	0x080039d9
 8003974:	080039d9 	.word	0x080039d9
 8003978:	080039d9 	.word	0x080039d9
 800397c:	080039b5 	.word	0x080039b5
 8003980:	080039d9 	.word	0x080039d9
 8003984:	080039d9 	.word	0x080039d9
 8003988:	080039d9 	.word	0x080039d9
 800398c:	080039c7 	.word	0x080039c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0202 	bic.w	r2, r2, #2
 800399e:	60da      	str	r2, [r3, #12]
      break;
 80039a0:	e01d      	b.n	80039de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0204 	bic.w	r2, r2, #4
 80039b0:	60da      	str	r2, [r3, #12]
      break;
 80039b2:	e014      	b.n	80039de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0208 	bic.w	r2, r2, #8
 80039c2:	60da      	str	r2, [r3, #12]
      break;
 80039c4:	e00b      	b.n	80039de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0210 	bic.w	r2, r2, #16
 80039d4:	60da      	str	r2, [r3, #12]
      break;
 80039d6:	e002      	b.n	80039de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d132      	bne.n	8003a4a <HAL_TIM_IC_Stop_IT+0x10a>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fefe 	bl	80047ee <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IC_Stop_IT+0xd2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_IC_Stop_IT+0xe2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003a20:	e013      	b.n	8003a4a <HAL_TIM_IC_Stop_IT+0x10a>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_IC_Stop_IT+0xf2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003a30:	e00b      	b.n	8003a4a <HAL_TIM_IC_Stop_IT+0x10a>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_IC_Stop_IT+0x102>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003a40:	e003      	b.n	8003a4a <HAL_TIM_IC_Stop_IT+0x10a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0202 	mvn.w	r2, #2
 8003a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fc fe9c 	bl	80007d4 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fb7a 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fb80 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0204 	mvn.w	r2, #4
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fc fe72 	bl	80007d4 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fb50 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fb56 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0208 	mvn.w	r2, #8
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc fe48 	bl	80007d4 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fb26 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fb2c 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0210 	mvn.w	r2, #16
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2208      	movs	r2, #8
 8003b82:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc fe1e 	bl	80007d4 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fafc 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fb02 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fc fce4 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	2b40      	cmp	r3, #64	@ 0x40
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fadc 	bl	80041bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e048      	b.n	8003cbc <HAL_TIM_OC_ConfigChannel+0xb0>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	d839      	bhi.n	8003cac <HAL_TIM_OC_ConfigChannel+0xa0>
 8003c38:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003cad 	.word	0x08003cad
 8003c48:	08003cad 	.word	0x08003cad
 8003c4c:	08003cad 	.word	0x08003cad
 8003c50:	08003c83 	.word	0x08003c83
 8003c54:	08003cad 	.word	0x08003cad
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003c91 	.word	0x08003c91
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003cad 	.word	0x08003cad
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003c9f 	.word	0x08003c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fb18 	bl	80042b0 <TIM_OC1_SetConfig>
      break;
 8003c80:	e017      	b.n	8003cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb4d 	bl	8004328 <TIM_OC2_SetConfig>
      break;
 8003c8e:	e010      	b.n	8003cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fb84 	bl	80043a4 <TIM_OC3_SetConfig>
      break;
 8003c9c:	e009      	b.n	8003cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fbba 	bl	800441e <TIM_OC4_SetConfig>
      break;
 8003caa:	e002      	b.n	8003cb2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e088      	b.n	8003df4 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (Channel == TIM_CHANNEL_1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d00:	f000 fbcc 	bl	800449c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 020c 	bic.w	r2, r2, #12
 8003d12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6999      	ldr	r1, [r3, #24]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	619a      	str	r2, [r3, #24]
 8003d26:	e060      	b.n	8003dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d11c      	bne.n	8003d68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d3e:	f000 fc3b 	bl	80045b8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6999      	ldr	r1, [r3, #24]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
 8003d66:	e040      	b.n	8003dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11b      	bne.n	8003da6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d7e:	f000 fc86 	bl	800468e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 020c 	bic.w	r2, r2, #12
 8003d90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69d9      	ldr	r1, [r3, #28]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	61da      	str	r2, [r3, #28]
 8003da4:	e021      	b.n	8003dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	d11c      	bne.n	8003de6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003dbc:	f000 fca2 	bl	8004704 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69d9      	ldr	r1, [r3, #28]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	021a      	lsls	r2, r3, #8
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	61da      	str	r2, [r3, #28]
 8003de4:	e001      	b.n	8003dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0ae      	b.n	8003f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b0c      	cmp	r3, #12
 8003e26:	f200 809f 	bhi.w	8003f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003f69 	.word	0x08003f69
 8003e38:	08003f69 	.word	0x08003f69
 8003e3c:	08003f69 	.word	0x08003f69
 8003e40:	08003ea5 	.word	0x08003ea5
 8003e44:	08003f69 	.word	0x08003f69
 8003e48:	08003f69 	.word	0x08003f69
 8003e4c:	08003f69 	.word	0x08003f69
 8003e50:	08003ee7 	.word	0x08003ee7
 8003e54:	08003f69 	.word	0x08003f69
 8003e58:	08003f69 	.word	0x08003f69
 8003e5c:	08003f69 	.word	0x08003f69
 8003e60:	08003f27 	.word	0x08003f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fa20 	bl	80042b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0204 	bic.w	r2, r2, #4
 8003e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6999      	ldr	r1, [r3, #24]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	619a      	str	r2, [r3, #24]
      break;
 8003ea2:	e064      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa3c 	bl	8004328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6999      	ldr	r1, [r3, #24]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	619a      	str	r2, [r3, #24]
      break;
 8003ee4:	e043      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fa59 	bl	80043a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0208 	orr.w	r2, r2, #8
 8003f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0204 	bic.w	r2, r2, #4
 8003f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	61da      	str	r2, [r3, #28]
      break;
 8003f24:	e023      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fa76 	bl	800441e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	021a      	lsls	r2, r3, #8
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	61da      	str	r2, [r3, #28]
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIM_ConfigClockSource+0x1c>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e0b4      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x186>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd4:	d03e      	beq.n	8004054 <HAL_TIM_ConfigClockSource+0xd4>
 8003fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fda:	f200 8087 	bhi.w	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe2:	f000 8086 	beq.w	80040f2 <HAL_TIM_ConfigClockSource+0x172>
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fea:	d87f      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b70      	cmp	r3, #112	@ 0x70
 8003fee:	d01a      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0xa6>
 8003ff0:	2b70      	cmp	r3, #112	@ 0x70
 8003ff2:	d87b      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b60      	cmp	r3, #96	@ 0x60
 8003ff6:	d050      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x11a>
 8003ff8:	2b60      	cmp	r3, #96	@ 0x60
 8003ffa:	d877      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b50      	cmp	r3, #80	@ 0x50
 8003ffe:	d03c      	beq.n	800407a <HAL_TIM_ConfigClockSource+0xfa>
 8004000:	2b50      	cmp	r3, #80	@ 0x50
 8004002:	d873      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b40      	cmp	r3, #64	@ 0x40
 8004006:	d058      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x13a>
 8004008:	2b40      	cmp	r3, #64	@ 0x40
 800400a:	d86f      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b30      	cmp	r3, #48	@ 0x30
 800400e:	d064      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b30      	cmp	r3, #48	@ 0x30
 8004012:	d86b      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d060      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	2b20      	cmp	r3, #32
 800401a:	d867      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05c      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004020:	2b10      	cmp	r3, #16
 8004022:	d05a      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004024:	e062      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004036:	f000 fbbb 	bl	80047b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	609a      	str	r2, [r3, #8]
      break;
 8004052:	e04f      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	f000 fba4 	bl	80047b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004076:	609a      	str	r2, [r3, #8]
      break;
 8004078:	e03c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fa68 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2150      	movs	r1, #80	@ 0x50
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fb72 	bl	800477c <TIM_ITRx_SetConfig>
      break;
 8004098:	e02c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fac2 	bl	8004630 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2160      	movs	r1, #96	@ 0x60
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb62 	bl	800477c <TIM_ITRx_SetConfig>
      break;
 80040b8:	e01c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fa48 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2140      	movs	r1, #64	@ 0x40
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb52 	bl	800477c <TIM_ITRx_SetConfig>
      break;
 80040d8:	e00c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 fb49 	bl	800477c <TIM_ITRx_SetConfig>
      break;
 80040ea:	e003      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      break;
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d831      	bhi.n	8004188 <HAL_TIM_ReadCapturedValue+0x78>
 8004124:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	08004161 	.word	0x08004161
 8004130:	08004189 	.word	0x08004189
 8004134:	08004189 	.word	0x08004189
 8004138:	08004189 	.word	0x08004189
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004189 	.word	0x08004189
 8004144:	08004189 	.word	0x08004189
 8004148:	08004189 	.word	0x08004189
 800414c:	08004175 	.word	0x08004175
 8004150:	08004189 	.word	0x08004189
 8004154:	08004189 	.word	0x08004189
 8004158:	08004189 	.word	0x08004189
 800415c:	0800417f 	.word	0x0800417f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004166:	60fb      	str	r3, [r7, #12]

      break;
 8004168:	e00f      	b.n	800418a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	60fb      	str	r3, [r7, #12]

      break;
 8004172:	e00a      	b.n	800418a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	60fb      	str	r3, [r7, #12]

      break;
 800417c:	e005      	b.n	800418a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	60fb      	str	r3, [r7, #12]

      break;
 8004186:	e000      	b.n	800418a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004188:	bf00      	nop
  }

  return tmpreg;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop

08004198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
	...

080041d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e6:	d00f      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004298 <TIM_Base_SetConfig+0xc8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00b      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2a      	ldr	r2, [pc, #168]	@ (800429c <TIM_Base_SetConfig+0xcc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d007      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a29      	ldr	r2, [pc, #164]	@ (80042a0 <TIM_Base_SetConfig+0xd0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_Base_SetConfig+0x38>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a28      	ldr	r2, [pc, #160]	@ (80042a4 <TIM_Base_SetConfig+0xd4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004220:	d017      	beq.n	8004252 <TIM_Base_SetConfig+0x82>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1c      	ldr	r2, [pc, #112]	@ (8004298 <TIM_Base_SetConfig+0xc8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <TIM_Base_SetConfig+0x82>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1b      	ldr	r2, [pc, #108]	@ (800429c <TIM_Base_SetConfig+0xcc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_Base_SetConfig+0x82>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1a      	ldr	r2, [pc, #104]	@ (80042a0 <TIM_Base_SetConfig+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_Base_SetConfig+0x82>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a19      	ldr	r2, [pc, #100]	@ (80042a4 <TIM_Base_SetConfig+0xd4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0x82>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <TIM_Base_SetConfig+0xd8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0x82>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <TIM_Base_SetConfig+0xdc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	615a      	str	r2, [r3, #20]
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40010800 	.word	0x40010800
 80042a8:	40010c00 	.word	0x40010c00
 80042ac:	40011000 	.word	0x40011000

080042b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f023 0201 	bic.w	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0302 	bic.w	r3, r3, #2
 80042f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0210 	bic.w	r2, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800435e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0320 	bic.w	r3, r3, #32
 8004372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	621a      	str	r2, [r3, #32]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800444c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004454:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	031b      	lsls	r3, r3, #12
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
	...

0800449c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f023 0201 	bic.w	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c8:	d00f      	beq.n	80044ea <TIM_TI1_SetConfig+0x4e>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <TIM_TI1_SetConfig+0xb0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_TI1_SetConfig+0x4e>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004550 <TIM_TI1_SetConfig+0xb4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_TI1_SetConfig+0x4e>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <TIM_TI1_SetConfig+0xb8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_TI1_SetConfig+0x4e>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004558 <TIM_TI1_SetConfig+0xbc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <TIM_TI1_SetConfig+0x52>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <TIM_TI1_SetConfig+0x54>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e003      	b.n	800450e <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	b2db      	uxtb	r3, r3
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f023 030a 	bic.w	r3, r3, #10
 8004528:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 030a 	and.w	r3, r3, #10
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010800 	.word	0x40010800

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 030a 	bic.w	r3, r3, #10
 8004598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f023 0210 	bic.w	r2, r3, #16
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	031b      	lsls	r3, r3, #12
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800460a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0210 	bic.w	r2, r3, #16
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800465a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	031b      	lsls	r3, r3, #12
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800466c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800468e:	b480      	push	{r7}
 8004690:	b087      	sub	sp, #28
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80046de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004730:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004742:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	031b      	lsls	r3, r3, #12
 8004748:	b29b      	uxth	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004756:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	031b      	lsls	r3, r3, #12
 800475c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	f043 0307 	orr.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2201      	movs	r2, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	43db      	mvns	r3, r3
 8004810:	401a      	ands	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1a      	ldr	r2, [r3, #32]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	431a      	orrs	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
	...

08004838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e046      	b.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004892:	d00e      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a13      	ldr	r2, [pc, #76]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a12      	ldr	r2, [pc, #72]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a10      	ldr	r2, [pc, #64]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10c      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40010800 	.word	0x40010800

080048f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e042      	b.n	800498c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fcf8 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	@ 0x24
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fdc5 	bl	80054c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800494c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800495c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800496c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	@ 0x28
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d16d      	bne.n	8004a90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_Transmit+0x2c>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e066      	b.n	8004a92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2221      	movs	r2, #33	@ 0x21
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d2:	f7fc fdcd 	bl	8001570 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ec:	d108      	bne.n	8004a00 <HAL_UART_Transmit+0x6c>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e003      	b.n	8004a08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a08:	e02a      	b.n	8004a60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	@ 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fb14 	bl	8005042 <UART_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e036      	b.n	8004a92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e007      	b.n	8004a52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1cf      	bne.n	8004a0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	2140      	movs	r1, #64	@ 0x40
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fae4 	bl	8005042 <UART_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e006      	b.n	8004a92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e000      	b.n	8004a92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d112      	bne.n	8004ada <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Receive_IT+0x26>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e00b      	b.n	8004adc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	461a      	mov	r2, r3
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fb24 	bl	800511e <UART_Start_Receive_IT>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	e000      	b.n	8004adc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
  }
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_UART_IRQHandler+0x66>
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fc01 	bl	800534a <UART_Receive_IT>
      return;
 8004b48:	e25b      	b.n	8005002 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80de 	beq.w	8004d10 <HAL_UART_IRQHandler+0x22c>
 8004b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80d1 	beq.w	8004d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_UART_IRQHandler+0xae>
 8004b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xd2>
 8004b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_UART_IRQHandler+0xf6>
 8004bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd2:	f043 0204 	orr.w	r2, r3, #4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d011      	beq.n	8004c0a <HAL_UART_IRQHandler+0x126>
 8004be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d105      	bne.n	8004bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c02:	f043 0208 	orr.w	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 81f2 	beq.w	8004ff8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_UART_IRQHandler+0x14e>
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb8c 	bl	800534a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_UART_IRQHandler+0x17a>
 8004c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04f      	beq.n	8004cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa96 	bl	8005190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d141      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1d9      	bne.n	8004c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d013      	beq.n	8004cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec4 <HAL_UART_IRQHandler+0x3e0>)
 8004ccc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fa18 	bl	8002108 <HAL_DMA_Abort_IT>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	e00e      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f993 	bl	800501a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	e00a      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f98f 	bl	800501a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	e006      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f98b 	bl	800501a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d0a:	e175      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	bf00      	nop
    return;
 8004d0e:	e173      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f040 814f 	bne.w	8004fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8148 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8141 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	f040 80b6 	bne.w	8004ec8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8145 	beq.w	8004ffc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	f080 813e 	bcs.w	8004ffc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	f000 8088 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004dc0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1d9      	bne.n	8004d94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3314      	adds	r3, #20
 8004de6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e04:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e08:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e1      	bne.n	8004de0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3314      	adds	r3, #20
 8004e22:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e40:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e3      	bne.n	8004e1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e74:	f023 0310 	bic.w	r3, r3, #16
 8004e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e88:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e3      	bne.n	8004e62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fd f8f5 	bl	800208e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8b6 	bl	800502c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ec0:	e09c      	b.n	8004ffc <HAL_UART_IRQHandler+0x518>
 8004ec2:	bf00      	nop
 8004ec4:	08005255 	.word	0x08005255
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 808e 	beq.w	8005000 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8089 	beq.w	8005000 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f12:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e3      	bne.n	8004eee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	623b      	str	r3, [r7, #32]
   return(result);
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e3      	bne.n	8004f26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0310 	bic.w	r3, r3, #16
 8004f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f90:	61fa      	str	r2, [r7, #28]
 8004f92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e3      	bne.n	8004f6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f83b 	bl	800502c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fb6:	e023      	b.n	8005000 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d009      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x4f4>
 8004fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f953 	bl	800527c <UART_Transmit_IT>
    return;
 8004fd6:	e014      	b.n	8005002 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <HAL_UART_IRQHandler+0x51e>
 8004fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f992 	bl	800531a <UART_EndTransmit_IT>
    return;
 8004ff6:	e004      	b.n	8005002 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ff8:	bf00      	nop
 8004ffa:	e002      	b.n	8005002 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <HAL_UART_IRQHandler+0x51e>
      return;
 8005000:	bf00      	nop
  }
}
 8005002:	37e8      	adds	r7, #232	@ 0xe8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr

08005042 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b090      	sub	sp, #64	@ 0x40
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	4613      	mov	r3, r2
 8005050:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005052:	e050      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d04c      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800505c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <UART_WaitOnFlagUntilTimeout+0x30>
 8005062:	f7fc fa85 	bl	8001570 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800506e:	429a      	cmp	r2, r3
 8005070:	d241      	bcs.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005092:	637a      	str	r2, [r7, #52]	@ 0x34
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e5      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050c6:	623a      	str	r2, [r7, #32]
 80050c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	69f9      	ldr	r1, [r7, #28]
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e5      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e00f      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	429a      	cmp	r2, r3
 8005112:	d09f      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3740      	adds	r7, #64	@ 0x40
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	4613      	mov	r3, r2
 800512a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2222      	movs	r2, #34	@ 0x22
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005162:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0220 	orr.w	r2, r2, #32
 8005182:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b095      	sub	sp, #84	@ 0x54
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	61fb      	str	r3, [r7, #28]
   return(result);
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e5      	bne.n	80051cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005204:	2b01      	cmp	r3, #1
 8005206:	d119      	bne.n	800523c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	60bb      	str	r3, [r7, #8]
   return(result);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0310 	bic.w	r3, r3, #16
 800521e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005228:	61ba      	str	r2, [r7, #24]
 800522a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6979      	ldr	r1, [r7, #20]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	613b      	str	r3, [r7, #16]
   return(result);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800524a:	bf00      	nop
 800524c:	3754      	adds	r7, #84	@ 0x54
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fed3 	bl	800501a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b21      	cmp	r3, #33	@ 0x21
 800528e:	d13e      	bne.n	800530e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005298:	d114      	bne.n	80052c4 <UART_Transmit_IT+0x48>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d110      	bne.n	80052c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]
 80052c2:	e008      	b.n	80052d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6211      	str	r1, [r2, #32]
 80052ce:	781a      	ldrb	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29b      	uxth	r3, r3
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4619      	mov	r1, r3
 80052e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005308:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff fe64 	bl	8005008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b08c      	sub	sp, #48	@ 0x30
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b22      	cmp	r3, #34	@ 0x22
 800535c:	f040 80ae 	bne.w	80054bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005368:	d117      	bne.n	800539a <UART_Receive_IT+0x50>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d113      	bne.n	800539a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	b29a      	uxth	r2, r3
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005392:	1c9a      	adds	r2, r3, #2
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	629a      	str	r2, [r3, #40]	@ 0x28
 8005398:	e026      	b.n	80053e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ac:	d007      	beq.n	80053be <UART_Receive_IT+0x74>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <UART_Receive_IT+0x82>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e008      	b.n	80053de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	4619      	mov	r1, r3
 80053f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d15d      	bne.n	80054b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0220 	bic.w	r2, r2, #32
 800540a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800541a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	2b01      	cmp	r3, #1
 8005440:	d135      	bne.n	80054ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	613b      	str	r3, [r7, #16]
   return(result);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f023 0310 	bic.w	r3, r3, #16
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005468:	623a      	str	r2, [r7, #32]
 800546a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	69f9      	ldr	r1, [r7, #28]
 800546e:	6a3a      	ldr	r2, [r7, #32]
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	61bb      	str	r3, [r7, #24]
   return(result);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e5      	bne.n	8005448 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b10      	cmp	r3, #16
 8005488:	d10a      	bne.n	80054a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fdc0 	bl	800502c <HAL_UARTEx_RxEventCallback>
 80054ac:	e002      	b.n	80054b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fb f8be 	bl	8000630 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e002      	b.n	80054be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e000      	b.n	80054be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3730      	adds	r7, #48	@ 0x30
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005508:	f023 030c 	bic.w	r3, r3, #12
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	430b      	orrs	r3, r1
 8005514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a55      	ldr	r2, [pc, #340]	@ (8005688 <UART_SetConfig+0x1c0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d103      	bne.n	800553e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005536:	f7fd fd53 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	e002      	b.n	8005544 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800553e:	f7fd fd3b 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8005542:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d14c      	bne.n	80055e8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009a      	lsls	r2, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	4a49      	ldr	r2, [pc, #292]	@ (800568c <UART_SetConfig+0x1c4>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	0119      	lsls	r1, r3, #4
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009a      	lsls	r2, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	fbb2 f2f3 	udiv	r2, r2, r3
 8005584:	4b41      	ldr	r3, [pc, #260]	@ (800568c <UART_SetConfig+0x1c4>)
 8005586:	fba3 0302 	umull	r0, r3, r3, r2
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	2064      	movs	r0, #100	@ 0x64
 800558e:	fb00 f303 	mul.w	r3, r0, r3
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	3332      	adds	r3, #50	@ 0x32
 8005598:	4a3c      	ldr	r2, [pc, #240]	@ (800568c <UART_SetConfig+0x1c4>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055a6:	4419      	add	r1, r3
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009a      	lsls	r2, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80055be:	4b33      	ldr	r3, [pc, #204]	@ (800568c <UART_SetConfig+0x1c4>)
 80055c0:	fba3 0302 	umull	r0, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	2064      	movs	r0, #100	@ 0x64
 80055c8:	fb00 f303 	mul.w	r3, r0, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	3332      	adds	r3, #50	@ 0x32
 80055d2:	4a2e      	ldr	r2, [pc, #184]	@ (800568c <UART_SetConfig+0x1c4>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f003 0207 	and.w	r2, r3, #7
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	440a      	add	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e6:	e04a      	b.n	800567e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	009a      	lsls	r2, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	4a23      	ldr	r2, [pc, #140]	@ (800568c <UART_SetConfig+0x1c4>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	0119      	lsls	r1, r3, #4
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009a      	lsls	r2, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	fbb2 f2f3 	udiv	r2, r2, r3
 800561e:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <UART_SetConfig+0x1c4>)
 8005620:	fba3 0302 	umull	r0, r3, r3, r2
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	2064      	movs	r0, #100	@ 0x64
 8005628:	fb00 f303 	mul.w	r3, r0, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	3332      	adds	r3, #50	@ 0x32
 8005632:	4a16      	ldr	r2, [pc, #88]	@ (800568c <UART_SetConfig+0x1c4>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800563e:	4419      	add	r1, r3
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009a      	lsls	r2, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	fbb2 f2f3 	udiv	r2, r2, r3
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <UART_SetConfig+0x1c4>)
 8005658:	fba3 0302 	umull	r0, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	2064      	movs	r0, #100	@ 0x64
 8005660:	fb00 f303 	mul.w	r3, r0, r3
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	3332      	adds	r3, #50	@ 0x32
 800566a:	4a08      	ldr	r2, [pc, #32]	@ (800568c <UART_SetConfig+0x1c4>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	f003 020f 	and.w	r2, r3, #15
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	440a      	add	r2, r1
 800567c:	609a      	str	r2, [r3, #8]
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40013800 	.word	0x40013800
 800568c:	51eb851f 	.word	0x51eb851f

08005690 <memset>:
 8005690:	4603      	mov	r3, r0
 8005692:	4402      	add	r2, r0
 8005694:	4293      	cmp	r3, r2
 8005696:	d100      	bne.n	800569a <memset+0xa>
 8005698:	4770      	bx	lr
 800569a:	f803 1b01 	strb.w	r1, [r3], #1
 800569e:	e7f9      	b.n	8005694 <memset+0x4>

080056a0 <__libc_init_array>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	2600      	movs	r6, #0
 80056a4:	4d0c      	ldr	r5, [pc, #48]	@ (80056d8 <__libc_init_array+0x38>)
 80056a6:	4c0d      	ldr	r4, [pc, #52]	@ (80056dc <__libc_init_array+0x3c>)
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	42a6      	cmp	r6, r4
 80056ae:	d109      	bne.n	80056c4 <__libc_init_array+0x24>
 80056b0:	f000 f81a 	bl	80056e8 <_init>
 80056b4:	2600      	movs	r6, #0
 80056b6:	4d0a      	ldr	r5, [pc, #40]	@ (80056e0 <__libc_init_array+0x40>)
 80056b8:	4c0a      	ldr	r4, [pc, #40]	@ (80056e4 <__libc_init_array+0x44>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	42a6      	cmp	r6, r4
 80056c0:	d105      	bne.n	80056ce <__libc_init_array+0x2e>
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c8:	4798      	blx	r3
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7ee      	b.n	80056ac <__libc_init_array+0xc>
 80056ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d2:	4798      	blx	r3
 80056d4:	3601      	adds	r6, #1
 80056d6:	e7f2      	b.n	80056be <__libc_init_array+0x1e>
 80056d8:	08005750 	.word	0x08005750
 80056dc:	08005750 	.word	0x08005750
 80056e0:	08005750 	.word	0x08005750
 80056e4:	08005754 	.word	0x08005754

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
